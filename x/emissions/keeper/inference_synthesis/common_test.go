package inference_synthesis_test

import (
	"encoding/csv"
	"fmt"
	"strings"

	alloraMath "github.com/allora-network/allora-chain/math"
)

const simulatorHeaders = "returns,inference_0,inference_1,inference_2,inference_3,inference_4,forecasted_loss_0_for_0,forecasted_loss_0_for_1,forecasted_loss_0_for_2,forecasted_loss_0_for_3,forecasted_loss_0_for_4,forecasted_loss_1_for_0,forecasted_loss_1_for_1,forecasted_loss_1_for_2,forecasted_loss_1_for_3,forecasted_loss_1_for_4,forecasted_loss_2_for_0,forecasted_loss_2_for_1,forecasted_loss_2_for_2,forecasted_loss_2_for_3,forecasted_loss_2_for_4,forecast_implied_inference_0,forecast_implied_inference_1,forecast_implied_inference_2,forecast_implied_inference_0_oneout_0,forecast_implied_inference_0_oneout_1,forecast_implied_inference_0_oneout_2,forecast_implied_inference_0_oneout_3,forecast_implied_inference_0_oneout_4,forecast_implied_inference_1_oneout_0,forecast_implied_inference_1_oneout_1,forecast_implied_inference_1_oneout_2,forecast_implied_inference_1_oneout_3,forecast_implied_inference_1_oneout_4,forecast_implied_inference_2_oneout_0,forecast_implied_inference_2_oneout_1,forecast_implied_inference_2_oneout_2,forecast_implied_inference_2_oneout_3,forecast_implied_inference_2_oneout_4,network_inference,network_naive_inference,network_inference_oneout_0,network_inference_oneout_1,network_inference_oneout_2,network_inference_oneout_3,network_inference_oneout_4,network_inference_oneout_5,network_inference_oneout_6,network_inference_oneout_7,network_naive_inference_onein_0,network_naive_inference_onein_1,network_naive_inference_onein_2,network_loss,reputer_stake_0,reputer_stake_1,reputer_stake_2,reputer_stake_3,reputer_stake_4,reputer_0_loss_inference_0,reputer_0_loss_inference_1,reputer_0_loss_inference_2,reputer_0_loss_inference_3,reputer_0_loss_inference_4,reputer_1_loss_inference_0,reputer_1_loss_inference_1,reputer_1_loss_inference_2,reputer_1_loss_inference_3,reputer_1_loss_inference_4,reputer_2_loss_inference_0,reputer_2_loss_inference_1,reputer_2_loss_inference_2,reputer_2_loss_inference_3,reputer_2_loss_inference_4,reputer_3_loss_inference_0,reputer_3_loss_inference_1,reputer_3_loss_inference_2,reputer_3_loss_inference_3,reputer_3_loss_inference_4,reputer_4_loss_inference_0,reputer_4_loss_inference_1,reputer_4_loss_inference_2,reputer_4_loss_inference_3,reputer_4_loss_inference_4,reputer_0_loss_forecast_implied_inference_0,reputer_0_loss_forecast_implied_inference_1,reputer_0_loss_forecast_implied_inference_2,reputer_1_loss_forecast_implied_inference_0,reputer_1_loss_forecast_implied_inference_1,reputer_1_loss_forecast_implied_inference_2,reputer_2_loss_forecast_implied_inference_0,reputer_2_loss_forecast_implied_inference_1,reputer_2_loss_forecast_implied_inference_2,reputer_3_loss_forecast_implied_inference_0,reputer_3_loss_forecast_implied_inference_1,reputer_3_loss_forecast_implied_inference_2,reputer_4_loss_forecast_implied_inference_0,reputer_4_loss_forecast_implied_inference_1,reputer_4_loss_forecast_implied_inference_2,inference_loss_0,inference_loss_1,inference_loss_2,inference_loss_3,inference_loss_4,forecast_implied_inference_loss_0,forecast_implied_inference_loss_1,forecast_implied_inference_loss_2,inference_regret_worker_0,inference_regret_worker_1,inference_regret_worker_2,inference_regret_worker_3,inference_regret_worker_4,inference_regret_worker_5,inference_regret_worker_6,inference_regret_worker_7,inference_regret_worker_0_onein_0,inference_regret_worker_1_onein_0,inference_regret_worker_2_onein_0,inference_regret_worker_3_onein_0,inference_regret_worker_4_onein_0,inference_regret_worker_5_onein_0,inference_regret_worker_0_onein_1,inference_regret_worker_1_onein_1,inference_regret_worker_2_onein_1,inference_regret_worker_3_onein_1,inference_regret_worker_4_onein_1,inference_regret_worker_5_onein_1,inference_regret_worker_0_onein_2,inference_regret_worker_1_onein_2,inference_regret_worker_2_onein_2,inference_regret_worker_3_onein_2,inference_regret_worker_4_onein_2,inference_regret_worker_5_onein_2,reputer_0_loss_network_inference,reputer_1_loss_network_inference,reputer_2_loss_network_inference,reputer_3_loss_network_inference,reputer_4_loss_network_inference,network_loss_reputers"

func GetSimulatedValuesGetterForEpoch(
	epoch string,
) func(header string) alloraMath.Dec {
	r := csv.NewReader(strings.NewReader(simulatorHeaders + "\n" + epoch + "\n"))
	headersRead, err := r.Read()
	if err != nil {
		panic(err)
	}
	valuesRead, err := r.Read()
	if err != nil {
		panic(err)
	}
	simulatedValuesDec := make(map[string]alloraMath.Dec)
	if len(headersRead) != len(valuesRead) {
		panic("Header and values length mismatch")
	}
	for i := 0; i < len(headersRead); i++ {
		simulatedValuesDec[headersRead[i]] = alloraMath.MustNewDecFromString(valuesRead[i])
	}

	return func(header string) alloraMath.Dec {
		value, exists := simulatedValuesDec[header]
		if !exists {
			panic(fmt.Sprintf("Header '%s' not found in simulated values map", header))
		}
		return value
	}
}

func GetSimulatedValuesGetterForEpochs() map[int]func(header string) alloraMath.Dec {
	simulatorEpochs := map[int]string{
		0: "0.14734599092308542,0.09568027544066265,0.1363961722713124,0.28999212512190586,-0.043228157098207404,-0.08952427556667253,-2.4522483571827967,-3.9143259056607604,-0.9000652810336911,-1.6463473123710934,-1.7074338362858081,-3.6057839168272388,-3.3370374927703272,-1.8020705214436292,-0.4166286294086259,-0.6320114483270471,-2.2337117261065287,-2.9696871084391168,-2.600598385811391,0.2879310787880367,-2.393218206225104,0.07786322803380022,0.07786322803380022,0.07786322803380022,0.07340896618208459,0.06322999197442214,0.02483100376177378,0.10813607431680211,0.1197101039339184,0.07340896618208459,0.06322999197442214,0.02483100376177378,0.10813607431680211,0.1197101039339184,0.07340896618208459,0.06322999197442214,0.02483100376177378,0.10813607431680211,0.1197101039339184,0.07786322803380022,0.07786322803380022,0.07340896618208459,0.06322999197442214,0.02483100376177378,0.10813607431680211,0.1197101039339184,0.07786322803380022,0.07786322803380022,0.07786322803380022,0.07786322803380022,0.07786322803380022,0.07786322803380022,-2.275807620843759,217031.57378387608,216977.26497098248,191667.2084540071,165915.74025345925,192524.3792010807,-2.566939641403175,-3.9736265128811463,-1.6340360212984417,-1.4176728655687159,-1.2079652914565473,-2.6088805833404183,-4.000736871762039,-1.6890715035451003,-1.4317268105415675,-1.2617231938096802,-2.689672174984615,-3.9238074717070286,-1.5476152402605594,-1.8009740342405995,-1.1520002891011365,-2.7349150737829033,-4.03906759914352,-1.6070223223836477,-1.5228132940782646,-1.1307023134439265,-2.8117620659236184,-3.6409465030573775,-1.6136585227630547,-1.538615949883192,-1.1546136547916908,-2.31545419645954,-2.202524362738222,-2.2418613449256553,-2.463191636253571,-2.3117852658702835,-2.377847531291077,-2.307194877599067,-2.4421291055572634,-2.4565977821135654,-2.5007081332210515,-2.556704987343238,-2.4084782805129823,-2.2869687933477585,-2.096657210218583,-2.18113123428791,-2.6763048668905065,-3.915851167807982,-1.6207980063276026,-1.5368098127741545,-1.1854546887256259,-2.372078644284439,-2.3122813614294224,-2.329875537306649,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-2.246115755861928,-2.389726076391205,-2.4496588542454085,-2.0935493245943335,-2.1648829510940852,-2.275807620843759",
		1: "-0.05745793670163129,-0.04146077933409088,0.26430637626736225,-0.15537044892430302,0.20280570322915553,-0.2809213378134252,-2.6492671930352873,-1.095583070816085,-1.5996969055917107,-1.5636283897963263,-1.653693226447897,-3.1796232478126405,-1.9469176358512206,-3.340531306675051,-0.7430328122226876,-0.8004791268432215,-3.034331002898215,-0.03408752461993494,-1.4395724013525566,-1.5372154240009501,1.0002317318569662,-0.0021280973150602624,-0.0021280973150602624,-0.0021280973150602624,0.0077050731896973895,-0.06873671571066589,0.03618249058725043,-0.05336154745111421,0.06757021280953097,0.0077050731896973895,-0.06873671571066589,0.03618249058725043,-0.05336154745111421,0.06757021280953097,0.0077050731896973895,-0.06873671571066589,0.03618249058725043,-0.05336154745111421,0.06757021280953097,-0.002128097315060258,-0.0021280973150602685,0.007705073189697395,-0.06873671571066589,0.03618249058725042,-0.05336154745111421,0.06757021280953097,-0.00212809731506026,-0.00212809731506026,-0.00212809731506026,-0.0021280973150602676,-0.0021280973150602676,-0.0021280973150602676,-2.2746680980664324,217283.792426463,217288.83658437288,191831.31021715293,166101.3609442742,192706.7111574466,-2.453199488542913,-3.927474108646508,-1.5875734137853104,-1.413232962147433,-1.1645813959508593,-2.577129640134377,-4.013463196690888,-1.6225641793064787,-1.3927429446820159,-1.279568103423225,-2.7080537021907425,-4.050821038854415,-1.628754408936683,-1.685195119912563,-1.187854341176235,-2.6805643098631657,-3.844667147643489,-1.613528645869478,-1.3942731386256675,-1.2494959682102034,-2.6724445134599852,-3.789850883655542,-1.7549094862543286,-1.4826299763358262,-1.2615032689856926,-2.257223611729998,-2.2200021871391087,-2.3541839874974393,-2.4059121506439825,-2.3452453035112213,-2.290839580268419,-2.3163541655711244,-2.4115061571528535,-2.4199553202684294,-2.5648964075151084,-2.597414134132694,-2.33876846794408,-2.1857102145299496,-2.2027807687894683,-2.2922977412022663,-2.6113717888447368,-3.9295761984750865,-1.6404157359909375,-1.4720453012264856,-1.227747220318532,-2.3394142558222155,-2.345173563704459,-2.338315864496653,0.9336703690778304,1.0654908100408655,0.8365747637924505,0.8197377203160053,0.79530791222521,0.9064746157755783,0.9070505465638027,0.9063647766430221,0.9309667390022757,1.0627871799653106,0.8338711337168957,0.8170340902404505,0.7926042821496552,0.9037709857000236,0.928895380088691,1.060715821051726,0.8317997748033111,0.8149627313268659,0.7905329232360705,0.9022755575746633,0.9344740992853171,1.0662945402483521,0.8373784939999372,0.820541450523492,0.7961116424326966,0.9071685068505088,-2.2374825510512,-2.379941301136895,-2.3792642036007,-2.1063368755238936,-2.2388642699960517,-2.2746680980664324",
		2: "-0.07369649777428276,-0.002581909014417502,-0.040176235347061245,-0.16127260888226766,-0.2650234821483614,-0.22475663059136536,-1.4859617999114954,-1.9675342140709517,-1.5695832159168832,-1.0788764772284467,-1.9989928096438128,-3.069387034745436,-3.1516928820783194,-2.0399363729917765,-2.036254601993781,-2.5760515274013445,-1.596874381907372,-2.643181085845546,-1.882313219268639,-2.2415848872905446,-0.9728451247767491,-0.14401152149609722,-0.06033647642365894,-0.0788247910992649,-0.14406055700970213,-0.22116998428583062,-0.14203200418752598,-0.15022507568413512,-0.042805818043314764,-0.09971604694353424,-0.07764147234669996,-0.06081372035614342,-0.05997449737360058,-0.027452947250289073,-0.08300969134603335,-0.2505418137725777,-0.08073420268438519,-0.04435207078861626,-0.06538790375994824,-0.12212295687531177,-0.13876217319669462,-0.14543075032404645,-0.17185541443450286,-0.11658831204703714,-0.09761986109735195,-0.08638584349223712,-0.11899601907234242,-0.1309495969398336,-0.12830840912903274,-0.13963706457992842,-0.12569122373452205,-0.1287726095137897,-2.3119510720644354,217559.84209268863,217643.58465541984,192040.154795241,166304.25712108248,192957.18494825868,-2.794084752534733,-2.912821634455895,-1.666465324388764,-1.299483037447976,-1.2090755078850224,-2.915823629617737,-2.9853988644020046,-1.7479644345364538,-1.2582560150307411,-1.2482221909764606,-3.0263162379346786,-3.0088643777907707,-1.7447744585431957,-1.674889433292988,-1.1882842787996828,-3.0454528488179244,-2.882315026677848,-1.77611536413237,-1.3220364835770746,-1.3117571312313745,-2.95330515626394,-2.8950984623722817,-1.8514966966001682,-1.3636402989708447,-1.2870653407471915,-2.2824919560736756,-2.27604750292788,-2.375437672570877,-2.4221682862605367,-2.4008477647655777,-2.353153335799059,-2.4041089874731227,-2.402938933266083,-2.456237349098233,-2.511047796370679,-2.592673377511453,-2.3867542495649383,-2.2681895131640935,-2.252874586654308,-2.3254034947953484,-2.9396691722522155,-2.938920680110131,-1.7543662024988351,-1.3798177972415762,-1.2462292601725724,-2.3727145689425746,-2.377126639938461,-2.378371545401871,0.9030751421888253,1.0216386898413485,0.6971588004566455,0.6445506208021189,0.6092049398135028,0.8219035038858344,0.822863048694825,0.8223703463124634,0.8961366015974169,1.01470014924994,0.6902202598652369,0.6376120802107104,0.6022663992220942,0.814964963294426,0.8921315672954454,1.0106951149479686,0.6862152255632655,0.633607045908739,0.5982613649201227,0.811919473801445,0.9000390901938307,1.0186026378463537,0.6941227484616508,0.6415145688071242,0.6061688878185079,0.8193342943174687,-2.2622100195025574,-2.3935788818038666,-2.3997885341784317,-2.2004379345870424,-2.2846531825685865,-2.3119510720644354",
		3: "-0.1086093599370808,-0.23772957272378142,-0.3206683838203465,-0.1560428348450878,-0.4522695690798907,0.07921662671338901,-1.279565042483667,-1.8023838212861185,-2.7290991574493773,-0.7001340374717215,-1.0548889133075208,-2.1944885298394747,-0.8098096442068731,-1.7294465073793757,-0.5897442364764094,-1.6379694537640836,-1.8694055734902197,-1.315823499632638,-1.9910129037951294,-0.2869443116578908,0.06935400567563284,-0.1612628406995495,-0.21204353706275944,-0.19566458942928167,-0.16253920014979617,-0.15612586345806054,-0.3172991101417655,-0.1599227183181089,-0.1626657427520344,-0.07028824105402616,-0.2132111483924151,-0.2139736603348025,-0.2214512184171357,-0.2286515412740618,-0.16995305637421793,-0.18966020558503321,-0.2471097786080373,-0.19494204533665124,-0.19082284409960237,-0.2070580876184135,-0.2174987467511435,-0.17893495122999659,-0.18940322391012568,-0.2442619211421764,-0.17307716382110322,-0.24983578408497212,-0.21360026574967977,-0.2063458805549355,-0.20868573021686088,-0.20812609574254454,-0.21658954513641285,-0.2138597205308332,-2.3979699021542826,217893.18582272177,218110.2494880441,192285.4749845225,166569.99248307856,193289.33534758896,-2.6855836247833795,-2.895631339293046,-1.7499265266681285,-1.305485234369785,-1.3032707429834007,-2.7421144591057627,-2.9505249992351854,-1.8257754309573688,-1.30556830066608,-1.3611546391439875,-2.885122180844985,-2.992938824030687,-1.8295850098904913,-1.645045347805901,-1.2706527667399716,-2.865231705822166,-2.856048703054859,-1.9123237559680977,-1.3502439813378364,-1.421884969007282,-2.7646428879354983,-2.927587756580716,-1.9262754410236185,-1.4197555986390458,-1.389693127907496,-2.2770251604871934,-2.6108218287317517,-2.8780680843557107,-2.3890669526468318,-2.71902211306267,-2.88202230427151,-2.4049760457219245,-2.8205824831289767,-2.982323078758758,-2.43021925674522,-2.904987063386831,-2.9243544386129776,-2.3467190115016514,-2.6611899104848473,-2.8730423165363534,-2.782637496503791,-2.9262616029081383,-1.8440393923714176,-1.4014761986343318,-1.3465994687800888,-2.3661101521809256,-2.7349613326149345,-2.906047355383291,0.8512343874048937,0.9723039909325992,0.5720498694326944,0.48044618836991193,0.44314740249473317,0.7365271784999152,0.7742758868714076,0.7909410570041179,0.8495951749604952,0.9706647784882007,0.570410656988296,0.47880697592551347,0.4415081900503346,0.7348879660555169,0.8399443059696293,0.961013909497335,0.5607597879974301,0.46915610693464765,0.43185732105946867,0.7629858054361434,0.848163474550825,0.9692330780785305,0.5689789565786257,0.47737527551584324,0.44007648964066426,0.7878701441500492,-2.333958346614425,-2.4654746205187115,-2.502608834522719,-2.3040364263855366,-2.370809388366875,-2.3979699021542826",
		4: "-0.07820530429866374,-0.12911369797464775,-0.11397392477038251,-0.08225794110992682,0.4610805983360889,-0.23530655241179554,-2.166853714746728,-2.576245963402976,-4.349173902509044,-0.43938276809029053,-1.5000564859721817,-1.7137371847840663,-1.9531097489250415,-4.036804071449624,-0.45324956367773916,-1.51684125685237,-1.606671039157792,-3.054773368674252,-3.568477363226547,1.1628093342120673,-1.4044356992194016,-0.08985658213696854,-0.08566246201942397,-0.09773002028845901,-0.08790303718972156,-0.08688443720444393,-0.11898640122855499,-0.089445638490697,-0.08806744103361296,-0.08526635038065948,-0.08516143720244765,-0.12622948908685397,-0.08505666688925365,-0.08396658106142454,-0.09785844089879703,-0.08985603194344885,-0.12057288023310395,-0.09443908991686505,-0.09494859308567316,-0.04663249762827179,-0.020200472947778846,-0.03452560118559817,-0.03534065173879262,-0.054782034233138065,-0.1184686634647725,-0.0187555427469999,-0.040505142811180374,-0.041095932869504,-0.03936271157418527,-0.03170120824332098,-0.031047501110856184,-0.03305315292943287,-2.3374843203671096,218216.54888352467,218618.92283807945,192558.17466547008,166861.37222479642,193661.91538893126,-2.492243327000714,-2.574373154118222,-1.9092073404997798,-1.2347785453364006,-1.282179392226562,-2.51674728579474,-2.5965173111796442,-1.965549225632195,-1.2274360637849122,-1.3623779197962296,-2.6810056498295727,-2.682810825831458,-1.9764504388215496,-1.5552392172307439,-1.2999607211793762,-2.6527390954970684,-2.535888262399974,-2.0962933567165276,-1.277208708286648,-1.441831548639878,-2.586984067072113,-2.618562229787363,-2.0777427198290876,-1.3024257484398936,-1.3710043783361443,-2.307320105300563,-2.476656105883646,-2.6878216838032434,-2.406815996493469,-2.5733332635416684,-2.73861475553102,-2.4130635412334778,-2.6404436508421236,-2.8238308036740443,-2.4834339271984542,-2.717878556421278,-2.749220734290907,-2.4037308187625204,-2.548425934440393,-2.73535135986212,-2.5799607624531866,-2.602514698250348,-1.9992370401752122,-1.3158790457967369,-1.3476380671650992,-2.3984096926094347,-2.5845680676502005,-2.7451434756233484,0.790358592873012,0.9015766296276632,0.4810201544702352,0.33024104207588345,0.2998480369250588,0.6689669978741563,0.721556672912576,0.75261286682933,0.7941179660138709,0.9053360027685218,0.484779527611094,0.3340004152167423,0.3036074100659175,0.6727263710150151,0.7845106894196756,0.8957287261743269,0.4751722510168988,0.3243931386225471,0.29400013347172227,0.7157087694592397,0.7893094597447671,0.9005274964994182,0.4799710213419904,0.3291919089476385,0.29879890379681373,0.7515637337010851,-2.2700935153625603,-2.3746917456911314,-2.4545571435320737,-2.291052740709289,-2.2950177859938754,-2.3374843203671096",
	}

	gettersMap := map[int](func(header string) alloraMath.Dec){}
	for epochNumber, epoch := range simulatorEpochs {
		gettersMap[epochNumber] = GetSimulatedValuesGetterForEpoch(epoch)
	}
	return gettersMap
}
