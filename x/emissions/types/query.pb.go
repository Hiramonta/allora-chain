// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Total Stake returns the total amount of stake in the system
type QueryTotalStakeRequest struct {
}

func (m *QueryTotalStakeRequest) Reset()         { *m = QueryTotalStakeRequest{} }
func (m *QueryTotalStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalStakeRequest) ProtoMessage()    {}
func (*QueryTotalStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{2}
}
func (m *QueryTotalStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalStakeRequest.Merge(m, src)
}
func (m *QueryTotalStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalStakeRequest proto.InternalMessageInfo

// Total Stake returns the total amount of stake in the system
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
type QueryTotalStakeResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryTotalStakeResponse) Reset()         { *m = QueryTotalStakeResponse{} }
func (m *QueryTotalStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalStakeResponse) ProtoMessage()    {}
func (*QueryTotalStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{3}
}
func (m *QueryTotalStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalStakeResponse.Merge(m, src)
}
func (m *QueryTotalStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalStakeResponse proto.InternalMessageInfo

type QueryReputerStakeInTopicRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TopicId uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryReputerStakeInTopicRequest) Reset()         { *m = QueryReputerStakeInTopicRequest{} }
func (m *QueryReputerStakeInTopicRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReputerStakeInTopicRequest) ProtoMessage()    {}
func (*QueryReputerStakeInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{4}
}
func (m *QueryReputerStakeInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerStakeInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerStakeInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerStakeInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerStakeInTopicRequest.Merge(m, src)
}
func (m *QueryReputerStakeInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerStakeInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerStakeInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerStakeInTopicRequest proto.InternalMessageInfo

func (m *QueryReputerStakeInTopicRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryReputerStakeInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryReputerStakeInTopicResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryReputerStakeInTopicResponse) Reset()         { *m = QueryReputerStakeInTopicResponse{} }
func (m *QueryReputerStakeInTopicResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReputerStakeInTopicResponse) ProtoMessage()    {}
func (*QueryReputerStakeInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{5}
}
func (m *QueryReputerStakeInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerStakeInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerStakeInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerStakeInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerStakeInTopicResponse.Merge(m, src)
}
func (m *QueryReputerStakeInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerStakeInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerStakeInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerStakeInTopicResponse proto.InternalMessageInfo

type QueryMultiReputerStakeInTopicRequest struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	TopicId   uint64   `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryMultiReputerStakeInTopicRequest) Reset()         { *m = QueryMultiReputerStakeInTopicRequest{} }
func (m *QueryMultiReputerStakeInTopicRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMultiReputerStakeInTopicRequest) ProtoMessage()    {}
func (*QueryMultiReputerStakeInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{6}
}
func (m *QueryMultiReputerStakeInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiReputerStakeInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiReputerStakeInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiReputerStakeInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiReputerStakeInTopicRequest.Merge(m, src)
}
func (m *QueryMultiReputerStakeInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiReputerStakeInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiReputerStakeInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiReputerStakeInTopicRequest proto.InternalMessageInfo

func (m *QueryMultiReputerStakeInTopicRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *QueryMultiReputerStakeInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryMultiReputerStakeInTopicResponse struct {
	Amounts []*StakeInfo `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts,omitempty"`
}

func (m *QueryMultiReputerStakeInTopicResponse) Reset()         { *m = QueryMultiReputerStakeInTopicResponse{} }
func (m *QueryMultiReputerStakeInTopicResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMultiReputerStakeInTopicResponse) ProtoMessage()    {}
func (*QueryMultiReputerStakeInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{7}
}
func (m *QueryMultiReputerStakeInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiReputerStakeInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiReputerStakeInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiReputerStakeInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiReputerStakeInTopicResponse.Merge(m, src)
}
func (m *QueryMultiReputerStakeInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiReputerStakeInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiReputerStakeInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiReputerStakeInTopicResponse proto.InternalMessageInfo

func (m *QueryMultiReputerStakeInTopicResponse) GetAmounts() []*StakeInfo {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type QueryStakeFromReputerInTopicInSelfRequest struct {
	ReputerAddress string `protobuf:"bytes,1,opt,name=reputer_address,json=reputerAddress,proto3" json:"reputer_address,omitempty"`
	TopicId        uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) Reset() {
	*m = QueryStakeFromReputerInTopicInSelfRequest{}
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStakeFromReputerInTopicInSelfRequest) ProtoMessage() {}
func (*QueryStakeFromReputerInTopicInSelfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{8}
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromReputerInTopicInSelfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromReputerInTopicInSelfRequest.Merge(m, src)
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromReputerInTopicInSelfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromReputerInTopicInSelfRequest proto.InternalMessageInfo

func (m *QueryStakeFromReputerInTopicInSelfRequest) GetReputerAddress() string {
	if m != nil {
		return m.ReputerAddress
	}
	return ""
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryStakeFromReputerInTopicInSelfResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryStakeFromReputerInTopicInSelfResponse) Reset() {
	*m = QueryStakeFromReputerInTopicInSelfResponse{}
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStakeFromReputerInTopicInSelfResponse) ProtoMessage() {}
func (*QueryStakeFromReputerInTopicInSelfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{9}
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromReputerInTopicInSelfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromReputerInTopicInSelfResponse.Merge(m, src)
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromReputerInTopicInSelfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromReputerInTopicInSelfResponse proto.InternalMessageInfo

type QueryDelegateStakeInTopicInReputerRequest struct {
	ReputerAddress string `protobuf:"bytes,1,opt,name=reputer_address,json=reputerAddress,proto3" json:"reputer_address,omitempty"`
	TopicId        uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryDelegateStakeInTopicInReputerRequest) Reset() {
	*m = QueryDelegateStakeInTopicInReputerRequest{}
}
func (m *QueryDelegateStakeInTopicInReputerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateStakeInTopicInReputerRequest) ProtoMessage() {}
func (*QueryDelegateStakeInTopicInReputerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{10}
}
func (m *QueryDelegateStakeInTopicInReputerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeInTopicInReputerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeInTopicInReputerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeInTopicInReputerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeInTopicInReputerRequest.Merge(m, src)
}
func (m *QueryDelegateStakeInTopicInReputerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeInTopicInReputerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeInTopicInReputerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeInTopicInReputerRequest proto.InternalMessageInfo

func (m *QueryDelegateStakeInTopicInReputerRequest) GetReputerAddress() string {
	if m != nil {
		return m.ReputerAddress
	}
	return ""
}

func (m *QueryDelegateStakeInTopicInReputerRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryDelegateStakeInTopicInReputerResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryDelegateStakeInTopicInReputerResponse) Reset() {
	*m = QueryDelegateStakeInTopicInReputerResponse{}
}
func (m *QueryDelegateStakeInTopicInReputerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateStakeInTopicInReputerResponse) ProtoMessage() {}
func (*QueryDelegateStakeInTopicInReputerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{11}
}
func (m *QueryDelegateStakeInTopicInReputerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeInTopicInReputerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeInTopicInReputerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeInTopicInReputerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeInTopicInReputerResponse.Merge(m, src)
}
func (m *QueryDelegateStakeInTopicInReputerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeInTopicInReputerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeInTopicInReputerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeInTopicInReputerResponse proto.InternalMessageInfo

type QueryStakeFromDelegatorInTopicInReputerRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ReputerAddress   string `protobuf:"bytes,2,opt,name=reputer_address,json=reputerAddress,proto3" json:"reputer_address,omitempty"`
	TopicId          uint64 `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) Reset() {
	*m = QueryStakeFromDelegatorInTopicInReputerRequest{}
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStakeFromDelegatorInTopicInReputerRequest) ProtoMessage() {}
func (*QueryStakeFromDelegatorInTopicInReputerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{12}
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerRequest.Merge(m, src)
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerRequest proto.InternalMessageInfo

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) GetReputerAddress() string {
	if m != nil {
		return m.ReputerAddress
	}
	return ""
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryStakeFromDelegatorInTopicInReputerResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryStakeFromDelegatorInTopicInReputerResponse) Reset() {
	*m = QueryStakeFromDelegatorInTopicInReputerResponse{}
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStakeFromDelegatorInTopicInReputerResponse) ProtoMessage() {}
func (*QueryStakeFromDelegatorInTopicInReputerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{13}
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerResponse.Merge(m, src)
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerResponse proto.InternalMessageInfo

type QueryStakeFromDelegatorInTopicRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	TopicId          uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryStakeFromDelegatorInTopicRequest) Reset()         { *m = QueryStakeFromDelegatorInTopicRequest{} }
func (m *QueryStakeFromDelegatorInTopicRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeFromDelegatorInTopicRequest) ProtoMessage()    {}
func (*QueryStakeFromDelegatorInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{14}
}
func (m *QueryStakeFromDelegatorInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromDelegatorInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromDelegatorInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromDelegatorInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicRequest.Merge(m, src)
}
func (m *QueryStakeFromDelegatorInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromDelegatorInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromDelegatorInTopicRequest proto.InternalMessageInfo

func (m *QueryStakeFromDelegatorInTopicRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryStakeFromDelegatorInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryStakeFromDelegatorInTopicResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryStakeFromDelegatorInTopicResponse) Reset() {
	*m = QueryStakeFromDelegatorInTopicResponse{}
}
func (m *QueryStakeFromDelegatorInTopicResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeFromDelegatorInTopicResponse) ProtoMessage()    {}
func (*QueryStakeFromDelegatorInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{15}
}
func (m *QueryStakeFromDelegatorInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromDelegatorInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromDelegatorInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromDelegatorInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicResponse.Merge(m, src)
}
func (m *QueryStakeFromDelegatorInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromDelegatorInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromDelegatorInTopicResponse proto.InternalMessageInfo

type QueryTopicStakeRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicStakeRequest) Reset()         { *m = QueryTopicStakeRequest{} }
func (m *QueryTopicStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicStakeRequest) ProtoMessage()    {}
func (*QueryTopicStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{16}
}
func (m *QueryTopicStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicStakeRequest.Merge(m, src)
}
func (m *QueryTopicStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicStakeRequest proto.InternalMessageInfo

func (m *QueryTopicStakeRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicStakeResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryTopicStakeResponse) Reset()         { *m = QueryTopicStakeResponse{} }
func (m *QueryTopicStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicStakeResponse) ProtoMessage()    {}
func (*QueryTopicStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{17}
}
func (m *QueryTopicStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicStakeResponse.Merge(m, src)
}
func (m *QueryTopicStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicStakeResponse proto.InternalMessageInfo

type QueryNetworkLossBundleAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryNetworkLossBundleAtBlockRequest) Reset()         { *m = QueryNetworkLossBundleAtBlockRequest{} }
func (m *QueryNetworkLossBundleAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkLossBundleAtBlockRequest) ProtoMessage()    {}
func (*QueryNetworkLossBundleAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{18}
}
func (m *QueryNetworkLossBundleAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkLossBundleAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkLossBundleAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkLossBundleAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkLossBundleAtBlockRequest.Merge(m, src)
}
func (m *QueryNetworkLossBundleAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkLossBundleAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkLossBundleAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkLossBundleAtBlockRequest proto.InternalMessageInfo

func (m *QueryNetworkLossBundleAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryNetworkLossBundleAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryNetworkLossBundleAtBlockResponse struct {
	LossBundle *ValueBundle `protobuf:"bytes,1,opt,name=loss_bundle,json=lossBundle,proto3" json:"loss_bundle,omitempty"`
}

func (m *QueryNetworkLossBundleAtBlockResponse) Reset()         { *m = QueryNetworkLossBundleAtBlockResponse{} }
func (m *QueryNetworkLossBundleAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkLossBundleAtBlockResponse) ProtoMessage()    {}
func (*QueryNetworkLossBundleAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{19}
}
func (m *QueryNetworkLossBundleAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkLossBundleAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkLossBundleAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkLossBundleAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkLossBundleAtBlockResponse.Merge(m, src)
}
func (m *QueryNetworkLossBundleAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkLossBundleAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkLossBundleAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkLossBundleAtBlockResponse proto.InternalMessageInfo

func (m *QueryNetworkLossBundleAtBlockResponse) GetLossBundle() *ValueBundle {
	if m != nil {
		return m.LossBundle
	}
	return nil
}

type QueryNextTopicIdRequest struct {
}

func (m *QueryNextTopicIdRequest) Reset()         { *m = QueryNextTopicIdRequest{} }
func (m *QueryNextTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextTopicIdRequest) ProtoMessage()    {}
func (*QueryNextTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{20}
}
func (m *QueryNextTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextTopicIdRequest.Merge(m, src)
}
func (m *QueryNextTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextTopicIdRequest proto.InternalMessageInfo

type QueryNextTopicIdResponse struct {
	NextTopicId uint64 `protobuf:"varint,1,opt,name=next_topic_id,json=nextTopicId,proto3" json:"next_topic_id,omitempty"`
}

func (m *QueryNextTopicIdResponse) Reset()         { *m = QueryNextTopicIdResponse{} }
func (m *QueryNextTopicIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextTopicIdResponse) ProtoMessage()    {}
func (*QueryNextTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{21}
}
func (m *QueryNextTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextTopicIdResponse.Merge(m, src)
}
func (m *QueryNextTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextTopicIdResponse proto.InternalMessageInfo

func (m *QueryNextTopicIdResponse) GetNextTopicId() uint64 {
	if m != nil {
		return m.NextTopicId
	}
	return 0
}

type QueryTopicRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicRequest) Reset()         { *m = QueryTopicRequest{} }
func (m *QueryTopicRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicRequest) ProtoMessage()    {}
func (*QueryTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{22}
}
func (m *QueryTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicRequest.Merge(m, src)
}
func (m *QueryTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicRequest proto.InternalMessageInfo

func (m *QueryTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicResponse struct {
	Topic            *Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Weight           string `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
	EffectiveRevenue string `protobuf:"bytes,3,opt,name=effective_revenue,json=effectiveRevenue,proto3" json:"effective_revenue,omitempty"`
}

func (m *QueryTopicResponse) Reset()         { *m = QueryTopicResponse{} }
func (m *QueryTopicResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicResponse) ProtoMessage()    {}
func (*QueryTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{23}
}
func (m *QueryTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicResponse.Merge(m, src)
}
func (m *QueryTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicResponse proto.InternalMessageInfo

func (m *QueryTopicResponse) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *QueryTopicResponse) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *QueryTopicResponse) GetEffectiveRevenue() string {
	if m != nil {
		return m.EffectiveRevenue
	}
	return ""
}

type QueryActiveTopicsRequest struct {
	Pagination *SimpleCursorPaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveTopicsRequest) Reset()         { *m = QueryActiveTopicsRequest{} }
func (m *QueryActiveTopicsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveTopicsRequest) ProtoMessage()    {}
func (*QueryActiveTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{24}
}
func (m *QueryActiveTopicsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveTopicsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveTopicsRequest.Merge(m, src)
}
func (m *QueryActiveTopicsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveTopicsRequest proto.InternalMessageInfo

func (m *QueryActiveTopicsRequest) GetPagination() *SimpleCursorPaginationRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryActiveTopicsResponse struct {
	Topics     []*Topic                        `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	Pagination *SimpleCursorPaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveTopicsResponse) Reset()         { *m = QueryActiveTopicsResponse{} }
func (m *QueryActiveTopicsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveTopicsResponse) ProtoMessage()    {}
func (*QueryActiveTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{25}
}
func (m *QueryActiveTopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveTopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveTopicsResponse.Merge(m, src)
}
func (m *QueryActiveTopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveTopicsResponse proto.InternalMessageInfo

func (m *QueryActiveTopicsResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *QueryActiveTopicsResponse) GetPagination() *SimpleCursorPaginationResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Returns the inferences on a topic posted at a block height
type QueryInferencesAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryInferencesAtBlockRequest) Reset()         { *m = QueryInferencesAtBlockRequest{} }
func (m *QueryInferencesAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInferencesAtBlockRequest) ProtoMessage()    {}
func (*QueryInferencesAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{26}
}
func (m *QueryInferencesAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesAtBlockRequest.Merge(m, src)
}
func (m *QueryInferencesAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesAtBlockRequest proto.InternalMessageInfo

func (m *QueryInferencesAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryInferencesAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// Returns the inferences on a topic posted at a block height
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
type QueryInferencesAtBlockResponse struct {
	Inferences *Inferences `protobuf:"bytes,1,opt,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *QueryInferencesAtBlockResponse) Reset()         { *m = QueryInferencesAtBlockResponse{} }
func (m *QueryInferencesAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInferencesAtBlockResponse) ProtoMessage()    {}
func (*QueryInferencesAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{27}
}
func (m *QueryInferencesAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesAtBlockResponse.Merge(m, src)
}
func (m *QueryInferencesAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesAtBlockResponse proto.InternalMessageInfo

func (m *QueryInferencesAtBlockResponse) GetInferences() *Inferences {
	if m != nil {
		return m.Inferences
	}
	return nil
}

// Returns the forecasts on a topic posted at a block height
type QueryForecastsAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryForecastsAtBlockRequest) Reset()         { *m = QueryForecastsAtBlockRequest{} }
func (m *QueryForecastsAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryForecastsAtBlockRequest) ProtoMessage()    {}
func (*QueryForecastsAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{28}
}
func (m *QueryForecastsAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryForecastsAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryForecastsAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryForecastsAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryForecastsAtBlockRequest.Merge(m, src)
}
func (m *QueryForecastsAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryForecastsAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryForecastsAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryForecastsAtBlockRequest proto.InternalMessageInfo

func (m *QueryForecastsAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryForecastsAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// Returns the forecasts on a topic posted at a block height
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
type QueryForecastsAtBlockResponse struct {
	Forecasts *Forecasts `protobuf:"bytes,1,opt,name=forecasts,proto3" json:"forecasts,omitempty"`
}

func (m *QueryForecastsAtBlockResponse) Reset()         { *m = QueryForecastsAtBlockResponse{} }
func (m *QueryForecastsAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryForecastsAtBlockResponse) ProtoMessage()    {}
func (*QueryForecastsAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{29}
}
func (m *QueryForecastsAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryForecastsAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryForecastsAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryForecastsAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryForecastsAtBlockResponse.Merge(m, src)
}
func (m *QueryForecastsAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryForecastsAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryForecastsAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryForecastsAtBlockResponse proto.InternalMessageInfo

func (m *QueryForecastsAtBlockResponse) GetForecasts() *Forecasts {
	if m != nil {
		return m.Forecasts
	}
	return nil
}

type QueryWorkerLatestInferenceRequest struct {
	TopicId       uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	WorkerAddress string `protobuf:"bytes,2,opt,name=worker_address,json=workerAddress,proto3" json:"worker_address,omitempty"`
}

func (m *QueryWorkerLatestInferenceRequest) Reset()         { *m = QueryWorkerLatestInferenceRequest{} }
func (m *QueryWorkerLatestInferenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerLatestInferenceRequest) ProtoMessage()    {}
func (*QueryWorkerLatestInferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{30}
}
func (m *QueryWorkerLatestInferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerLatestInferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerLatestInferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerLatestInferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerLatestInferenceRequest.Merge(m, src)
}
func (m *QueryWorkerLatestInferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerLatestInferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerLatestInferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerLatestInferenceRequest proto.InternalMessageInfo

func (m *QueryWorkerLatestInferenceRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryWorkerLatestInferenceRequest) GetWorkerAddress() string {
	if m != nil {
		return m.WorkerAddress
	}
	return ""
}

type QueryWorkerLatestInferenceResponse struct {
	LatestInference *Inference `protobuf:"bytes,1,opt,name=latest_inference,json=latestInference,proto3" json:"latest_inference,omitempty"`
}

func (m *QueryWorkerLatestInferenceResponse) Reset()         { *m = QueryWorkerLatestInferenceResponse{} }
func (m *QueryWorkerLatestInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerLatestInferenceResponse) ProtoMessage()    {}
func (*QueryWorkerLatestInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{31}
}
func (m *QueryWorkerLatestInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerLatestInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerLatestInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerLatestInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerLatestInferenceResponse.Merge(m, src)
}
func (m *QueryWorkerLatestInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerLatestInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerLatestInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerLatestInferenceResponse proto.InternalMessageInfo

func (m *QueryWorkerLatestInferenceResponse) GetLatestInference() *Inference {
	if m != nil {
		return m.LatestInference
	}
	return nil
}

type QueryWorkerNodeInfoRequest struct {
	Libp2PKey string `protobuf:"bytes,1,opt,name=libp2p_key,json=libp2pKey,proto3" json:"libp2p_key,omitempty"`
}

func (m *QueryWorkerNodeInfoRequest) Reset()         { *m = QueryWorkerNodeInfoRequest{} }
func (m *QueryWorkerNodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerNodeInfoRequest) ProtoMessage()    {}
func (*QueryWorkerNodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{32}
}
func (m *QueryWorkerNodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerNodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerNodeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerNodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerNodeInfoRequest.Merge(m, src)
}
func (m *QueryWorkerNodeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerNodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerNodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerNodeInfoRequest proto.InternalMessageInfo

func (m *QueryWorkerNodeInfoRequest) GetLibp2PKey() string {
	if m != nil {
		return m.Libp2PKey
	}
	return ""
}

type QueryWorkerNodeInfoResponse struct {
	NodeInfo *OffchainNode `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
}

func (m *QueryWorkerNodeInfoResponse) Reset()         { *m = QueryWorkerNodeInfoResponse{} }
func (m *QueryWorkerNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerNodeInfoResponse) ProtoMessage()    {}
func (*QueryWorkerNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{33}
}
func (m *QueryWorkerNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerNodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerNodeInfoResponse.Merge(m, src)
}
func (m *QueryWorkerNodeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerNodeInfoResponse proto.InternalMessageInfo

func (m *QueryWorkerNodeInfoResponse) GetNodeInfo() *OffchainNode {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type QueryReputerNodeInfoRequest struct {
	Libp2PKey string `protobuf:"bytes,1,opt,name=libp2p_key,json=libp2pKey,proto3" json:"libp2p_key,omitempty"`
}

func (m *QueryReputerNodeInfoRequest) Reset()         { *m = QueryReputerNodeInfoRequest{} }
func (m *QueryReputerNodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReputerNodeInfoRequest) ProtoMessage()    {}
func (*QueryReputerNodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{34}
}
func (m *QueryReputerNodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerNodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerNodeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerNodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerNodeInfoRequest.Merge(m, src)
}
func (m *QueryReputerNodeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerNodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerNodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerNodeInfoRequest proto.InternalMessageInfo

func (m *QueryReputerNodeInfoRequest) GetLibp2PKey() string {
	if m != nil {
		return m.Libp2PKey
	}
	return ""
}

type QueryReputerNodeInfoResponse struct {
	NodeInfo *OffchainNode `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
}

func (m *QueryReputerNodeInfoResponse) Reset()         { *m = QueryReputerNodeInfoResponse{} }
func (m *QueryReputerNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReputerNodeInfoResponse) ProtoMessage()    {}
func (*QueryReputerNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{35}
}
func (m *QueryReputerNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerNodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerNodeInfoResponse.Merge(m, src)
}
func (m *QueryReputerNodeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerNodeInfoResponse proto.InternalMessageInfo

func (m *QueryReputerNodeInfoResponse) GetNodeInfo() *OffchainNode {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type QueryWorkerAddressByP2PKeyRequest struct {
	Libp2PKey string `protobuf:"bytes,1,opt,name=libp2p_key,json=libp2pKey,proto3" json:"libp2p_key,omitempty"`
}

func (m *QueryWorkerAddressByP2PKeyRequest) Reset()         { *m = QueryWorkerAddressByP2PKeyRequest{} }
func (m *QueryWorkerAddressByP2PKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerAddressByP2PKeyRequest) ProtoMessage()    {}
func (*QueryWorkerAddressByP2PKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{36}
}
func (m *QueryWorkerAddressByP2PKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerAddressByP2PKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerAddressByP2PKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerAddressByP2PKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerAddressByP2PKeyRequest.Merge(m, src)
}
func (m *QueryWorkerAddressByP2PKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerAddressByP2PKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerAddressByP2PKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerAddressByP2PKeyRequest proto.InternalMessageInfo

func (m *QueryWorkerAddressByP2PKeyRequest) GetLibp2PKey() string {
	if m != nil {
		return m.Libp2PKey
	}
	return ""
}

type QueryWorkerAddressByP2PKeyResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryWorkerAddressByP2PKeyResponse) Reset()         { *m = QueryWorkerAddressByP2PKeyResponse{} }
func (m *QueryWorkerAddressByP2PKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerAddressByP2PKeyResponse) ProtoMessage()    {}
func (*QueryWorkerAddressByP2PKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{37}
}
func (m *QueryWorkerAddressByP2PKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerAddressByP2PKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerAddressByP2PKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerAddressByP2PKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerAddressByP2PKeyResponse.Merge(m, src)
}
func (m *QueryWorkerAddressByP2PKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerAddressByP2PKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerAddressByP2PKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerAddressByP2PKeyResponse proto.InternalMessageInfo

func (m *QueryWorkerAddressByP2PKeyResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryReputerAddressByP2PKeyRequest struct {
	Libp2PKey string `protobuf:"bytes,1,opt,name=libp2p_key,json=libp2pKey,proto3" json:"libp2p_key,omitempty"`
}

func (m *QueryReputerAddressByP2PKeyRequest) Reset()         { *m = QueryReputerAddressByP2PKeyRequest{} }
func (m *QueryReputerAddressByP2PKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReputerAddressByP2PKeyRequest) ProtoMessage()    {}
func (*QueryReputerAddressByP2PKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{38}
}
func (m *QueryReputerAddressByP2PKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerAddressByP2PKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerAddressByP2PKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerAddressByP2PKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerAddressByP2PKeyRequest.Merge(m, src)
}
func (m *QueryReputerAddressByP2PKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerAddressByP2PKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerAddressByP2PKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerAddressByP2PKeyRequest proto.InternalMessageInfo

func (m *QueryReputerAddressByP2PKeyRequest) GetLibp2PKey() string {
	if m != nil {
		return m.Libp2PKey
	}
	return ""
}

type QueryReputerAddressByP2PKeyResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryReputerAddressByP2PKeyResponse) Reset()         { *m = QueryReputerAddressByP2PKeyResponse{} }
func (m *QueryReputerAddressByP2PKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReputerAddressByP2PKeyResponse) ProtoMessage()    {}
func (*QueryReputerAddressByP2PKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{39}
}
func (m *QueryReputerAddressByP2PKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerAddressByP2PKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerAddressByP2PKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerAddressByP2PKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerAddressByP2PKeyResponse.Merge(m, src)
}
func (m *QueryReputerAddressByP2PKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerAddressByP2PKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerAddressByP2PKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerAddressByP2PKeyResponse proto.InternalMessageInfo

func (m *QueryReputerAddressByP2PKeyResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryNetworkInferencesAtBlockRequest struct {
	TopicId                  uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeightLastInference int64  `protobuf:"varint,2,opt,name=block_height_last_inference,json=blockHeightLastInference,proto3" json:"block_height_last_inference,omitempty"`
	BlockHeightLastReward    int64  `protobuf:"varint,3,opt,name=block_height_last_reward,json=blockHeightLastReward,proto3" json:"block_height_last_reward,omitempty"`
}

func (m *QueryNetworkInferencesAtBlockRequest) Reset()         { *m = QueryNetworkInferencesAtBlockRequest{} }
func (m *QueryNetworkInferencesAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkInferencesAtBlockRequest) ProtoMessage()    {}
func (*QueryNetworkInferencesAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{40}
}
func (m *QueryNetworkInferencesAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkInferencesAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkInferencesAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkInferencesAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkInferencesAtBlockRequest.Merge(m, src)
}
func (m *QueryNetworkInferencesAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkInferencesAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkInferencesAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkInferencesAtBlockRequest proto.InternalMessageInfo

func (m *QueryNetworkInferencesAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryNetworkInferencesAtBlockRequest) GetBlockHeightLastInference() int64 {
	if m != nil {
		return m.BlockHeightLastInference
	}
	return 0
}

func (m *QueryNetworkInferencesAtBlockRequest) GetBlockHeightLastReward() int64 {
	if m != nil {
		return m.BlockHeightLastReward
	}
	return 0
}

type QueryLatestNetworkInferencesAtBlockRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryLatestNetworkInferencesAtBlockRequest) Reset() {
	*m = QueryLatestNetworkInferencesAtBlockRequest{}
}
func (m *QueryLatestNetworkInferencesAtBlockRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLatestNetworkInferencesAtBlockRequest) ProtoMessage() {}
func (*QueryLatestNetworkInferencesAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{41}
}
func (m *QueryLatestNetworkInferencesAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestNetworkInferencesAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestNetworkInferencesAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestNetworkInferencesAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestNetworkInferencesAtBlockRequest.Merge(m, src)
}
func (m *QueryLatestNetworkInferencesAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestNetworkInferencesAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestNetworkInferencesAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestNetworkInferencesAtBlockRequest proto.InternalMessageInfo

func (m *QueryLatestNetworkInferencesAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryIsWorkerNonceUnfulfilledRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) Reset()         { *m = QueryIsWorkerNonceUnfulfilledRequest{} }
func (m *QueryIsWorkerNonceUnfulfilledRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsWorkerNonceUnfulfilledRequest) ProtoMessage()    {}
func (*QueryIsWorkerNonceUnfulfilledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{42}
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWorkerNonceUnfulfilledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWorkerNonceUnfulfilledRequest.Merge(m, src)
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWorkerNonceUnfulfilledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWorkerNonceUnfulfilledRequest proto.InternalMessageInfo

func (m *QueryIsWorkerNonceUnfulfilledRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryIsWorkerNonceUnfulfilledResponse struct {
	IsWorkerNonceUnfulfilled bool `protobuf:"varint,1,opt,name=is_worker_nonce_unfulfilled,json=isWorkerNonceUnfulfilled,proto3" json:"is_worker_nonce_unfulfilled,omitempty"`
}

func (m *QueryIsWorkerNonceUnfulfilledResponse) Reset()         { *m = QueryIsWorkerNonceUnfulfilledResponse{} }
func (m *QueryIsWorkerNonceUnfulfilledResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsWorkerNonceUnfulfilledResponse) ProtoMessage()    {}
func (*QueryIsWorkerNonceUnfulfilledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{43}
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWorkerNonceUnfulfilledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWorkerNonceUnfulfilledResponse.Merge(m, src)
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWorkerNonceUnfulfilledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWorkerNonceUnfulfilledResponse proto.InternalMessageInfo

func (m *QueryIsWorkerNonceUnfulfilledResponse) GetIsWorkerNonceUnfulfilled() bool {
	if m != nil {
		return m.IsWorkerNonceUnfulfilled
	}
	return false
}

type QueryUnfulfilledReputerNoncesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryUnfulfilledReputerNoncesRequest) Reset()         { *m = QueryUnfulfilledReputerNoncesRequest{} }
func (m *QueryUnfulfilledReputerNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnfulfilledReputerNoncesRequest) ProtoMessage()    {}
func (*QueryUnfulfilledReputerNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{44}
}
func (m *QueryUnfulfilledReputerNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnfulfilledReputerNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnfulfilledReputerNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnfulfilledReputerNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnfulfilledReputerNoncesRequest.Merge(m, src)
}
func (m *QueryUnfulfilledReputerNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnfulfilledReputerNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnfulfilledReputerNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnfulfilledReputerNoncesRequest proto.InternalMessageInfo

func (m *QueryUnfulfilledReputerNoncesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryUnfulfilledReputerNoncesResponse struct {
	Nonces *ReputerRequestNonces `protobuf:"bytes,1,opt,name=nonces,proto3" json:"nonces,omitempty"`
}

func (m *QueryUnfulfilledReputerNoncesResponse) Reset()         { *m = QueryUnfulfilledReputerNoncesResponse{} }
func (m *QueryUnfulfilledReputerNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnfulfilledReputerNoncesResponse) ProtoMessage()    {}
func (*QueryUnfulfilledReputerNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{45}
}
func (m *QueryUnfulfilledReputerNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnfulfilledReputerNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnfulfilledReputerNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnfulfilledReputerNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnfulfilledReputerNoncesResponse.Merge(m, src)
}
func (m *QueryUnfulfilledReputerNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnfulfilledReputerNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnfulfilledReputerNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnfulfilledReputerNoncesResponse proto.InternalMessageInfo

func (m *QueryUnfulfilledReputerNoncesResponse) GetNonces() *ReputerRequestNonces {
	if m != nil {
		return m.Nonces
	}
	return nil
}

type QueryUnfulfilledWorkerNoncesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryUnfulfilledWorkerNoncesRequest) Reset()         { *m = QueryUnfulfilledWorkerNoncesRequest{} }
func (m *QueryUnfulfilledWorkerNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnfulfilledWorkerNoncesRequest) ProtoMessage()    {}
func (*QueryUnfulfilledWorkerNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{46}
}
func (m *QueryUnfulfilledWorkerNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnfulfilledWorkerNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnfulfilledWorkerNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnfulfilledWorkerNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnfulfilledWorkerNoncesRequest.Merge(m, src)
}
func (m *QueryUnfulfilledWorkerNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnfulfilledWorkerNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnfulfilledWorkerNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnfulfilledWorkerNoncesRequest proto.InternalMessageInfo

func (m *QueryUnfulfilledWorkerNoncesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryUnfulfilledWorkerNoncesResponse struct {
	Nonces *Nonces `protobuf:"bytes,1,opt,name=nonces,proto3" json:"nonces,omitempty"`
}

func (m *QueryUnfulfilledWorkerNoncesResponse) Reset()         { *m = QueryUnfulfilledWorkerNoncesResponse{} }
func (m *QueryUnfulfilledWorkerNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnfulfilledWorkerNoncesResponse) ProtoMessage()    {}
func (*QueryUnfulfilledWorkerNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{47}
}
func (m *QueryUnfulfilledWorkerNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnfulfilledWorkerNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnfulfilledWorkerNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnfulfilledWorkerNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnfulfilledWorkerNoncesResponse.Merge(m, src)
}
func (m *QueryUnfulfilledWorkerNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnfulfilledWorkerNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnfulfilledWorkerNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnfulfilledWorkerNoncesResponse proto.InternalMessageInfo

func (m *QueryUnfulfilledWorkerNoncesResponse) GetNonces() *Nonces {
	if m != nil {
		return m.Nonces
	}
	return nil
}

type QueryInfererNetworkRegretRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	ActorId string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
}

func (m *QueryInfererNetworkRegretRequest) Reset()         { *m = QueryInfererNetworkRegretRequest{} }
func (m *QueryInfererNetworkRegretRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInfererNetworkRegretRequest) ProtoMessage()    {}
func (*QueryInfererNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{48}
}
func (m *QueryInfererNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInfererNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInfererNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInfererNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInfererNetworkRegretRequest.Merge(m, src)
}
func (m *QueryInfererNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInfererNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInfererNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInfererNetworkRegretRequest proto.InternalMessageInfo

func (m *QueryInfererNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryInfererNetworkRegretRequest) GetActorId() string {
	if m != nil {
		return m.ActorId
	}
	return ""
}

type QueryInfererNetworkRegretResponse struct {
	Regret   *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
	NotFound bool              `protobuf:"varint,2,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (m *QueryInfererNetworkRegretResponse) Reset()         { *m = QueryInfererNetworkRegretResponse{} }
func (m *QueryInfererNetworkRegretResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInfererNetworkRegretResponse) ProtoMessage()    {}
func (*QueryInfererNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{49}
}
func (m *QueryInfererNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInfererNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInfererNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInfererNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInfererNetworkRegretResponse.Merge(m, src)
}
func (m *QueryInfererNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInfererNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInfererNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInfererNetworkRegretResponse proto.InternalMessageInfo

func (m *QueryInfererNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

func (m *QueryInfererNetworkRegretResponse) GetNotFound() bool {
	if m != nil {
		return m.NotFound
	}
	return false
}

type QueryIsReputerNonceUnfulfilledRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryIsReputerNonceUnfulfilledRequest) Reset()         { *m = QueryIsReputerNonceUnfulfilledRequest{} }
func (m *QueryIsReputerNonceUnfulfilledRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsReputerNonceUnfulfilledRequest) ProtoMessage()    {}
func (*QueryIsReputerNonceUnfulfilledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{50}
}
func (m *QueryIsReputerNonceUnfulfilledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsReputerNonceUnfulfilledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsReputerNonceUnfulfilledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsReputerNonceUnfulfilledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsReputerNonceUnfulfilledRequest.Merge(m, src)
}
func (m *QueryIsReputerNonceUnfulfilledRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsReputerNonceUnfulfilledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsReputerNonceUnfulfilledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsReputerNonceUnfulfilledRequest proto.InternalMessageInfo

func (m *QueryIsReputerNonceUnfulfilledRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryIsReputerNonceUnfulfilledRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryIsReputerNonceUnfulfilledResponse struct {
	IsReputerNonceUnfulfilled bool `protobuf:"varint,1,opt,name=is_reputer_nonce_unfulfilled,json=isReputerNonceUnfulfilled,proto3" json:"is_reputer_nonce_unfulfilled,omitempty"`
}

func (m *QueryIsReputerNonceUnfulfilledResponse) Reset() {
	*m = QueryIsReputerNonceUnfulfilledResponse{}
}
func (m *QueryIsReputerNonceUnfulfilledResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsReputerNonceUnfulfilledResponse) ProtoMessage()    {}
func (*QueryIsReputerNonceUnfulfilledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{51}
}
func (m *QueryIsReputerNonceUnfulfilledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsReputerNonceUnfulfilledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsReputerNonceUnfulfilledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsReputerNonceUnfulfilledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsReputerNonceUnfulfilledResponse.Merge(m, src)
}
func (m *QueryIsReputerNonceUnfulfilledResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsReputerNonceUnfulfilledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsReputerNonceUnfulfilledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsReputerNonceUnfulfilledResponse proto.InternalMessageInfo

func (m *QueryIsReputerNonceUnfulfilledResponse) GetIsReputerNonceUnfulfilled() bool {
	if m != nil {
		return m.IsReputerNonceUnfulfilled
	}
	return false
}

type QueryNetworkInferencesAtBlockResponse struct {
	NetworkInferences *ValueBundle `protobuf:"bytes,1,opt,name=network_inferences,json=networkInferences,proto3" json:"network_inferences,omitempty"`
}

func (m *QueryNetworkInferencesAtBlockResponse) Reset()         { *m = QueryNetworkInferencesAtBlockResponse{} }
func (m *QueryNetworkInferencesAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkInferencesAtBlockResponse) ProtoMessage()    {}
func (*QueryNetworkInferencesAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{52}
}
func (m *QueryNetworkInferencesAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkInferencesAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkInferencesAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkInferencesAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkInferencesAtBlockResponse.Merge(m, src)
}
func (m *QueryNetworkInferencesAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkInferencesAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkInferencesAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkInferencesAtBlockResponse proto.InternalMessageInfo

func (m *QueryNetworkInferencesAtBlockResponse) GetNetworkInferences() *ValueBundle {
	if m != nil {
		return m.NetworkInferences
	}
	return nil
}

type QueryLatestNetworkInferencesAtBlockResponse struct {
	NetworkInferences         *ValueBundle             `protobuf:"bytes,1,opt,name=network_inferences,json=networkInferences,proto3" json:"network_inferences,omitempty"`
	InfererWeights            []*RegretInformedWeight  `protobuf:"bytes,2,rep,name=inferer_weights,json=infererWeights,proto3" json:"inferer_weights,omitempty"`
	ForecasterWeights         []*RegretInformedWeight  `protobuf:"bytes,3,rep,name=forecaster_weights,json=forecasterWeights,proto3" json:"forecaster_weights,omitempty"`
	ForecastImpliedInferences []*WorkerAttributedValue `protobuf:"bytes,4,rep,name=forecastImpliedInferences,proto3" json:"forecastImpliedInferences,omitempty"`
}

func (m *QueryLatestNetworkInferencesAtBlockResponse) Reset() {
	*m = QueryLatestNetworkInferencesAtBlockResponse{}
}
func (m *QueryLatestNetworkInferencesAtBlockResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLatestNetworkInferencesAtBlockResponse) ProtoMessage() {}
func (*QueryLatestNetworkInferencesAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{53}
}
func (m *QueryLatestNetworkInferencesAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestNetworkInferencesAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestNetworkInferencesAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestNetworkInferencesAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestNetworkInferencesAtBlockResponse.Merge(m, src)
}
func (m *QueryLatestNetworkInferencesAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestNetworkInferencesAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestNetworkInferencesAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestNetworkInferencesAtBlockResponse proto.InternalMessageInfo

func (m *QueryLatestNetworkInferencesAtBlockResponse) GetNetworkInferences() *ValueBundle {
	if m != nil {
		return m.NetworkInferences
	}
	return nil
}

func (m *QueryLatestNetworkInferencesAtBlockResponse) GetInfererWeights() []*RegretInformedWeight {
	if m != nil {
		return m.InfererWeights
	}
	return nil
}

func (m *QueryLatestNetworkInferencesAtBlockResponse) GetForecasterWeights() []*RegretInformedWeight {
	if m != nil {
		return m.ForecasterWeights
	}
	return nil
}

func (m *QueryLatestNetworkInferencesAtBlockResponse) GetForecastImpliedInferences() []*WorkerAttributedValue {
	if m != nil {
		return m.ForecastImpliedInferences
	}
	return nil
}

type QueryIsWorkerRegisteredInTopicIdRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) Reset() {
	*m = QueryIsWorkerRegisteredInTopicIdRequest{}
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsWorkerRegisteredInTopicIdRequest) ProtoMessage()    {}
func (*QueryIsWorkerRegisteredInTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{54}
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdRequest.Merge(m, src)
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdRequest proto.InternalMessageInfo

func (m *QueryIsWorkerRegisteredInTopicIdRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryIsWorkerRegisteredInTopicIdResponse struct {
	IsRegistered bool `protobuf:"varint,1,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (m *QueryIsWorkerRegisteredInTopicIdResponse) Reset() {
	*m = QueryIsWorkerRegisteredInTopicIdResponse{}
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsWorkerRegisteredInTopicIdResponse) ProtoMessage()    {}
func (*QueryIsWorkerRegisteredInTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{55}
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdResponse.Merge(m, src)
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdResponse proto.InternalMessageInfo

func (m *QueryIsWorkerRegisteredInTopicIdResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type QueryIsReputerRegisteredInTopicIdRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) Reset() {
	*m = QueryIsReputerRegisteredInTopicIdRequest{}
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsReputerRegisteredInTopicIdRequest) ProtoMessage()    {}
func (*QueryIsReputerRegisteredInTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{56}
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsReputerRegisteredInTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsReputerRegisteredInTopicIdRequest.Merge(m, src)
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsReputerRegisteredInTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsReputerRegisteredInTopicIdRequest proto.InternalMessageInfo

func (m *QueryIsReputerRegisteredInTopicIdRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryIsReputerRegisteredInTopicIdResponse struct {
	IsRegistered bool `protobuf:"varint,1,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (m *QueryIsReputerRegisteredInTopicIdResponse) Reset() {
	*m = QueryIsReputerRegisteredInTopicIdResponse{}
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIsReputerRegisteredInTopicIdResponse) ProtoMessage() {}
func (*QueryIsReputerRegisteredInTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{57}
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsReputerRegisteredInTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsReputerRegisteredInTopicIdResponse.Merge(m, src)
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsReputerRegisteredInTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsReputerRegisteredInTopicIdResponse proto.InternalMessageInfo

func (m *QueryIsReputerRegisteredInTopicIdResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type QueryIsWhitelistAdminRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryIsWhitelistAdminRequest) Reset()         { *m = QueryIsWhitelistAdminRequest{} }
func (m *QueryIsWhitelistAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsWhitelistAdminRequest) ProtoMessage()    {}
func (*QueryIsWhitelistAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{58}
}
func (m *QueryIsWhitelistAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWhitelistAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWhitelistAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWhitelistAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWhitelistAdminRequest.Merge(m, src)
}
func (m *QueryIsWhitelistAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWhitelistAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWhitelistAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWhitelistAdminRequest proto.InternalMessageInfo

func (m *QueryIsWhitelistAdminRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryIsWhitelistAdminResponse struct {
	IsAdmin bool `protobuf:"varint,1,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
}

func (m *QueryIsWhitelistAdminResponse) Reset()         { *m = QueryIsWhitelistAdminResponse{} }
func (m *QueryIsWhitelistAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsWhitelistAdminResponse) ProtoMessage()    {}
func (*QueryIsWhitelistAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{59}
}
func (m *QueryIsWhitelistAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWhitelistAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWhitelistAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWhitelistAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWhitelistAdminResponse.Merge(m, src)
}
func (m *QueryIsWhitelistAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWhitelistAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWhitelistAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWhitelistAdminResponse proto.InternalMessageInfo

func (m *QueryIsWhitelistAdminResponse) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type QueryStakeRemovalsForBlockRequest struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryStakeRemovalsForBlockRequest) Reset()         { *m = QueryStakeRemovalsForBlockRequest{} }
func (m *QueryStakeRemovalsForBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRemovalsForBlockRequest) ProtoMessage()    {}
func (*QueryStakeRemovalsForBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{60}
}
func (m *QueryStakeRemovalsForBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRemovalsForBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRemovalsForBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRemovalsForBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRemovalsForBlockRequest.Merge(m, src)
}
func (m *QueryStakeRemovalsForBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRemovalsForBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRemovalsForBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRemovalsForBlockRequest proto.InternalMessageInfo

func (m *QueryStakeRemovalsForBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryStakeRemovalsForBlockResponse struct {
	Removals []*StakeRemovalInfo `protobuf:"bytes,1,rep,name=removals,proto3" json:"removals,omitempty"`
}

func (m *QueryStakeRemovalsForBlockResponse) Reset()         { *m = QueryStakeRemovalsForBlockResponse{} }
func (m *QueryStakeRemovalsForBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRemovalsForBlockResponse) ProtoMessage()    {}
func (*QueryStakeRemovalsForBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{61}
}
func (m *QueryStakeRemovalsForBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRemovalsForBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRemovalsForBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRemovalsForBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRemovalsForBlockResponse.Merge(m, src)
}
func (m *QueryStakeRemovalsForBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRemovalsForBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRemovalsForBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRemovalsForBlockResponse proto.InternalMessageInfo

func (m *QueryStakeRemovalsForBlockResponse) GetRemovals() []*StakeRemovalInfo {
	if m != nil {
		return m.Removals
	}
	return nil
}

type QueryDelegateStakeRemovalsForBlockRequest struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryDelegateStakeRemovalsForBlockRequest) Reset() {
	*m = QueryDelegateStakeRemovalsForBlockRequest{}
}
func (m *QueryDelegateStakeRemovalsForBlockRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateStakeRemovalsForBlockRequest) ProtoMessage() {}
func (*QueryDelegateStakeRemovalsForBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{62}
}
func (m *QueryDelegateStakeRemovalsForBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeRemovalsForBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeRemovalsForBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeRemovalsForBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeRemovalsForBlockRequest.Merge(m, src)
}
func (m *QueryDelegateStakeRemovalsForBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeRemovalsForBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeRemovalsForBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeRemovalsForBlockRequest proto.InternalMessageInfo

func (m *QueryDelegateStakeRemovalsForBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryDelegateStakeRemovalsForBlockResponse struct {
	Removals []*DelegateStakeRemovalInfo `protobuf:"bytes,1,rep,name=removals,proto3" json:"removals,omitempty"`
}

func (m *QueryDelegateStakeRemovalsForBlockResponse) Reset() {
	*m = QueryDelegateStakeRemovalsForBlockResponse{}
}
func (m *QueryDelegateStakeRemovalsForBlockResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateStakeRemovalsForBlockResponse) ProtoMessage() {}
func (*QueryDelegateStakeRemovalsForBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{63}
}
func (m *QueryDelegateStakeRemovalsForBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeRemovalsForBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeRemovalsForBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeRemovalsForBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeRemovalsForBlockResponse.Merge(m, src)
}
func (m *QueryDelegateStakeRemovalsForBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeRemovalsForBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeRemovalsForBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeRemovalsForBlockResponse proto.InternalMessageInfo

func (m *QueryDelegateStakeRemovalsForBlockResponse) GetRemovals() []*DelegateStakeRemovalInfo {
	if m != nil {
		return m.Removals
	}
	return nil
}

type QueryStakeRemovalInfoRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *QueryStakeRemovalInfoRequest) Reset()         { *m = QueryStakeRemovalInfoRequest{} }
func (m *QueryStakeRemovalInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRemovalInfoRequest) ProtoMessage()    {}
func (*QueryStakeRemovalInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{64}
}
func (m *QueryStakeRemovalInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRemovalInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRemovalInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRemovalInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRemovalInfoRequest.Merge(m, src)
}
func (m *QueryStakeRemovalInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRemovalInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRemovalInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRemovalInfoRequest proto.InternalMessageInfo

func (m *QueryStakeRemovalInfoRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryStakeRemovalInfoRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type QueryStakeRemovalInfoResponse struct {
	Removal *StakeRemovalInfo `protobuf:"bytes,1,opt,name=removal,proto3" json:"removal,omitempty"`
}

func (m *QueryStakeRemovalInfoResponse) Reset()         { *m = QueryStakeRemovalInfoResponse{} }
func (m *QueryStakeRemovalInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRemovalInfoResponse) ProtoMessage()    {}
func (*QueryStakeRemovalInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{65}
}
func (m *QueryStakeRemovalInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRemovalInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRemovalInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRemovalInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRemovalInfoResponse.Merge(m, src)
}
func (m *QueryStakeRemovalInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRemovalInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRemovalInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRemovalInfoResponse proto.InternalMessageInfo

func (m *QueryStakeRemovalInfoResponse) GetRemoval() *StakeRemovalInfo {
	if m != nil {
		return m.Removal
	}
	return nil
}

type QueryDelegateStakeRemovalInfoRequest struct {
	TopicId   uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Delegator string `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Reputer   string `protobuf:"bytes,3,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *QueryDelegateStakeRemovalInfoRequest) Reset()         { *m = QueryDelegateStakeRemovalInfoRequest{} }
func (m *QueryDelegateStakeRemovalInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateStakeRemovalInfoRequest) ProtoMessage()    {}
func (*QueryDelegateStakeRemovalInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{66}
}
func (m *QueryDelegateStakeRemovalInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeRemovalInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeRemovalInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeRemovalInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeRemovalInfoRequest.Merge(m, src)
}
func (m *QueryDelegateStakeRemovalInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeRemovalInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeRemovalInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeRemovalInfoRequest proto.InternalMessageInfo

func (m *QueryDelegateStakeRemovalInfoRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryDelegateStakeRemovalInfoRequest) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *QueryDelegateStakeRemovalInfoRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type QueryDelegateStakeRemovalInfoResponse struct {
	Removal *DelegateStakeRemovalInfo `protobuf:"bytes,1,opt,name=removal,proto3" json:"removal,omitempty"`
}

func (m *QueryDelegateStakeRemovalInfoResponse) Reset()         { *m = QueryDelegateStakeRemovalInfoResponse{} }
func (m *QueryDelegateStakeRemovalInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateStakeRemovalInfoResponse) ProtoMessage()    {}
func (*QueryDelegateStakeRemovalInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{67}
}
func (m *QueryDelegateStakeRemovalInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeRemovalInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeRemovalInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeRemovalInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeRemovalInfoResponse.Merge(m, src)
}
func (m *QueryDelegateStakeRemovalInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeRemovalInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeRemovalInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeRemovalInfoResponse proto.InternalMessageInfo

func (m *QueryDelegateStakeRemovalInfoResponse) GetRemoval() *DelegateStakeRemovalInfo {
	if m != nil {
		return m.Removal
	}
	return nil
}

type QueryTopicLastCommitRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicLastCommitRequest) Reset()         { *m = QueryTopicLastCommitRequest{} }
func (m *QueryTopicLastCommitRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicLastCommitRequest) ProtoMessage()    {}
func (*QueryTopicLastCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{68}
}
func (m *QueryTopicLastCommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicLastCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicLastCommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicLastCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicLastCommitRequest.Merge(m, src)
}
func (m *QueryTopicLastCommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicLastCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicLastCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicLastCommitRequest proto.InternalMessageInfo

func (m *QueryTopicLastCommitRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicLastCommitResponse struct {
	LastCommit *TimestampedActorNonce `protobuf:"bytes,1,opt,name=last_commit,json=lastCommit,proto3" json:"last_commit,omitempty"`
}

func (m *QueryTopicLastCommitResponse) Reset()         { *m = QueryTopicLastCommitResponse{} }
func (m *QueryTopicLastCommitResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicLastCommitResponse) ProtoMessage()    {}
func (*QueryTopicLastCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{69}
}
func (m *QueryTopicLastCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicLastCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicLastCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicLastCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicLastCommitResponse.Merge(m, src)
}
func (m *QueryTopicLastCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicLastCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicLastCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicLastCommitResponse proto.InternalMessageInfo

func (m *QueryTopicLastCommitResponse) GetLastCommit() *TimestampedActorNonce {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "emissions.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "emissions.v1.QueryParamsResponse")
	proto.RegisterType((*QueryTotalStakeRequest)(nil), "emissions.v1.QueryTotalStakeRequest")
	proto.RegisterType((*QueryTotalStakeResponse)(nil), "emissions.v1.QueryTotalStakeResponse")
	proto.RegisterType((*QueryReputerStakeInTopicRequest)(nil), "emissions.v1.QueryReputerStakeInTopicRequest")
	proto.RegisterType((*QueryReputerStakeInTopicResponse)(nil), "emissions.v1.QueryReputerStakeInTopicResponse")
	proto.RegisterType((*QueryMultiReputerStakeInTopicRequest)(nil), "emissions.v1.QueryMultiReputerStakeInTopicRequest")
	proto.RegisterType((*QueryMultiReputerStakeInTopicResponse)(nil), "emissions.v1.QueryMultiReputerStakeInTopicResponse")
	proto.RegisterType((*QueryStakeFromReputerInTopicInSelfRequest)(nil), "emissions.v1.QueryStakeFromReputerInTopicInSelfRequest")
	proto.RegisterType((*QueryStakeFromReputerInTopicInSelfResponse)(nil), "emissions.v1.QueryStakeFromReputerInTopicInSelfResponse")
	proto.RegisterType((*QueryDelegateStakeInTopicInReputerRequest)(nil), "emissions.v1.QueryDelegateStakeInTopicInReputerRequest")
	proto.RegisterType((*QueryDelegateStakeInTopicInReputerResponse)(nil), "emissions.v1.QueryDelegateStakeInTopicInReputerResponse")
	proto.RegisterType((*QueryStakeFromDelegatorInTopicInReputerRequest)(nil), "emissions.v1.QueryStakeFromDelegatorInTopicInReputerRequest")
	proto.RegisterType((*QueryStakeFromDelegatorInTopicInReputerResponse)(nil), "emissions.v1.QueryStakeFromDelegatorInTopicInReputerResponse")
	proto.RegisterType((*QueryStakeFromDelegatorInTopicRequest)(nil), "emissions.v1.QueryStakeFromDelegatorInTopicRequest")
	proto.RegisterType((*QueryStakeFromDelegatorInTopicResponse)(nil), "emissions.v1.QueryStakeFromDelegatorInTopicResponse")
	proto.RegisterType((*QueryTopicStakeRequest)(nil), "emissions.v1.QueryTopicStakeRequest")
	proto.RegisterType((*QueryTopicStakeResponse)(nil), "emissions.v1.QueryTopicStakeResponse")
	proto.RegisterType((*QueryNetworkLossBundleAtBlockRequest)(nil), "emissions.v1.QueryNetworkLossBundleAtBlockRequest")
	proto.RegisterType((*QueryNetworkLossBundleAtBlockResponse)(nil), "emissions.v1.QueryNetworkLossBundleAtBlockResponse")
	proto.RegisterType((*QueryNextTopicIdRequest)(nil), "emissions.v1.QueryNextTopicIdRequest")
	proto.RegisterType((*QueryNextTopicIdResponse)(nil), "emissions.v1.QueryNextTopicIdResponse")
	proto.RegisterType((*QueryTopicRequest)(nil), "emissions.v1.QueryTopicRequest")
	proto.RegisterType((*QueryTopicResponse)(nil), "emissions.v1.QueryTopicResponse")
	proto.RegisterType((*QueryActiveTopicsRequest)(nil), "emissions.v1.QueryActiveTopicsRequest")
	proto.RegisterType((*QueryActiveTopicsResponse)(nil), "emissions.v1.QueryActiveTopicsResponse")
	proto.RegisterType((*QueryInferencesAtBlockRequest)(nil), "emissions.v1.QueryInferencesAtBlockRequest")
	proto.RegisterType((*QueryInferencesAtBlockResponse)(nil), "emissions.v1.QueryInferencesAtBlockResponse")
	proto.RegisterType((*QueryForecastsAtBlockRequest)(nil), "emissions.v1.QueryForecastsAtBlockRequest")
	proto.RegisterType((*QueryForecastsAtBlockResponse)(nil), "emissions.v1.QueryForecastsAtBlockResponse")
	proto.RegisterType((*QueryWorkerLatestInferenceRequest)(nil), "emissions.v1.QueryWorkerLatestInferenceRequest")
	proto.RegisterType((*QueryWorkerLatestInferenceResponse)(nil), "emissions.v1.QueryWorkerLatestInferenceResponse")
	proto.RegisterType((*QueryWorkerNodeInfoRequest)(nil), "emissions.v1.QueryWorkerNodeInfoRequest")
	proto.RegisterType((*QueryWorkerNodeInfoResponse)(nil), "emissions.v1.QueryWorkerNodeInfoResponse")
	proto.RegisterType((*QueryReputerNodeInfoRequest)(nil), "emissions.v1.QueryReputerNodeInfoRequest")
	proto.RegisterType((*QueryReputerNodeInfoResponse)(nil), "emissions.v1.QueryReputerNodeInfoResponse")
	proto.RegisterType((*QueryWorkerAddressByP2PKeyRequest)(nil), "emissions.v1.QueryWorkerAddressByP2PKeyRequest")
	proto.RegisterType((*QueryWorkerAddressByP2PKeyResponse)(nil), "emissions.v1.QueryWorkerAddressByP2PKeyResponse")
	proto.RegisterType((*QueryReputerAddressByP2PKeyRequest)(nil), "emissions.v1.QueryReputerAddressByP2PKeyRequest")
	proto.RegisterType((*QueryReputerAddressByP2PKeyResponse)(nil), "emissions.v1.QueryReputerAddressByP2PKeyResponse")
	proto.RegisterType((*QueryNetworkInferencesAtBlockRequest)(nil), "emissions.v1.QueryNetworkInferencesAtBlockRequest")
	proto.RegisterType((*QueryLatestNetworkInferencesAtBlockRequest)(nil), "emissions.v1.QueryLatestNetworkInferencesAtBlockRequest")
	proto.RegisterType((*QueryIsWorkerNonceUnfulfilledRequest)(nil), "emissions.v1.QueryIsWorkerNonceUnfulfilledRequest")
	proto.RegisterType((*QueryIsWorkerNonceUnfulfilledResponse)(nil), "emissions.v1.QueryIsWorkerNonceUnfulfilledResponse")
	proto.RegisterType((*QueryUnfulfilledReputerNoncesRequest)(nil), "emissions.v1.QueryUnfulfilledReputerNoncesRequest")
	proto.RegisterType((*QueryUnfulfilledReputerNoncesResponse)(nil), "emissions.v1.QueryUnfulfilledReputerNoncesResponse")
	proto.RegisterType((*QueryUnfulfilledWorkerNoncesRequest)(nil), "emissions.v1.QueryUnfulfilledWorkerNoncesRequest")
	proto.RegisterType((*QueryUnfulfilledWorkerNoncesResponse)(nil), "emissions.v1.QueryUnfulfilledWorkerNoncesResponse")
	proto.RegisterType((*QueryInfererNetworkRegretRequest)(nil), "emissions.v1.QueryInfererNetworkRegretRequest")
	proto.RegisterType((*QueryInfererNetworkRegretResponse)(nil), "emissions.v1.QueryInfererNetworkRegretResponse")
	proto.RegisterType((*QueryIsReputerNonceUnfulfilledRequest)(nil), "emissions.v1.QueryIsReputerNonceUnfulfilledRequest")
	proto.RegisterType((*QueryIsReputerNonceUnfulfilledResponse)(nil), "emissions.v1.QueryIsReputerNonceUnfulfilledResponse")
	proto.RegisterType((*QueryNetworkInferencesAtBlockResponse)(nil), "emissions.v1.QueryNetworkInferencesAtBlockResponse")
	proto.RegisterType((*QueryLatestNetworkInferencesAtBlockResponse)(nil), "emissions.v1.QueryLatestNetworkInferencesAtBlockResponse")
	proto.RegisterType((*QueryIsWorkerRegisteredInTopicIdRequest)(nil), "emissions.v1.QueryIsWorkerRegisteredInTopicIdRequest")
	proto.RegisterType((*QueryIsWorkerRegisteredInTopicIdResponse)(nil), "emissions.v1.QueryIsWorkerRegisteredInTopicIdResponse")
	proto.RegisterType((*QueryIsReputerRegisteredInTopicIdRequest)(nil), "emissions.v1.QueryIsReputerRegisteredInTopicIdRequest")
	proto.RegisterType((*QueryIsReputerRegisteredInTopicIdResponse)(nil), "emissions.v1.QueryIsReputerRegisteredInTopicIdResponse")
	proto.RegisterType((*QueryIsWhitelistAdminRequest)(nil), "emissions.v1.QueryIsWhitelistAdminRequest")
	proto.RegisterType((*QueryIsWhitelistAdminResponse)(nil), "emissions.v1.QueryIsWhitelistAdminResponse")
	proto.RegisterType((*QueryStakeRemovalsForBlockRequest)(nil), "emissions.v1.QueryStakeRemovalsForBlockRequest")
	proto.RegisterType((*QueryStakeRemovalsForBlockResponse)(nil), "emissions.v1.QueryStakeRemovalsForBlockResponse")
	proto.RegisterType((*QueryDelegateStakeRemovalsForBlockRequest)(nil), "emissions.v1.QueryDelegateStakeRemovalsForBlockRequest")
	proto.RegisterType((*QueryDelegateStakeRemovalsForBlockResponse)(nil), "emissions.v1.QueryDelegateStakeRemovalsForBlockResponse")
	proto.RegisterType((*QueryStakeRemovalInfoRequest)(nil), "emissions.v1.QueryStakeRemovalInfoRequest")
	proto.RegisterType((*QueryStakeRemovalInfoResponse)(nil), "emissions.v1.QueryStakeRemovalInfoResponse")
	proto.RegisterType((*QueryDelegateStakeRemovalInfoRequest)(nil), "emissions.v1.QueryDelegateStakeRemovalInfoRequest")
	proto.RegisterType((*QueryDelegateStakeRemovalInfoResponse)(nil), "emissions.v1.QueryDelegateStakeRemovalInfoResponse")
	proto.RegisterType((*QueryTopicLastCommitRequest)(nil), "emissions.v1.QueryTopicLastCommitRequest")
	proto.RegisterType((*QueryTopicLastCommitResponse)(nil), "emissions.v1.QueryTopicLastCommitResponse")
}

func init() { proto.RegisterFile("emissions/v1/query.proto", fileDescriptor_c426af2f1e908986) }

var fileDescriptor_c426af2f1e908986 = []byte{
	// 3089 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5b, 0xcf, 0x6f, 0xdc, 0xc6,
	0xf5, 0x37, 0xa5, 0x44, 0x96, 0xc6, 0xf1, 0xaf, 0x89, 0x63, 0xaf, 0x28, 0x59, 0x96, 0xe8, 0xd8,
	0x96, 0x25, 0x5b, 0xb4, 0x24, 0xff, 0xd0, 0xd7, 0x89, 0xe3, 0x48, 0x4e, 0xbc, 0xd6, 0xd7, 0x8e,
	0xe3, 0x30, 0xa9, 0xdd, 0x1a, 0x6d, 0xb7, 0xd4, 0xee, 0xac, 0x44, 0x98, 0x4b, 0x6e, 0x48, 0xae,
	0x63, 0x41, 0x15, 0xda, 0x14, 0x39, 0x34, 0x40, 0x0b, 0x14, 0x28, 0x10, 0xf4, 0xd0, 0x43, 0x7b,
	0xeb, 0xa5, 0x69, 0x50, 0xf4, 0x07, 0x72, 0xe8, 0xa5, 0xed, 0x21, 0xed, 0xa5, 0x41, 0x73, 0x09,
	0x82, 0x22, 0x68, 0xe3, 0x16, 0xe9, 0xdf, 0xd0, 0x53, 0xc1, 0x99, 0xc7, 0x1f, 0xc3, 0x9d, 0x21,
	0xb9, 0x8e, 0x04, 0xf4, 0x62, 0x78, 0x67, 0xde, 0x7b, 0xf3, 0xf9, 0xcc, 0xbc, 0x99, 0x79, 0xf3,
	0x1e, 0x85, 0x2a, 0xa4, 0x65, 0xf9, 0xbe, 0xe5, 0x3a, 0xbe, 0x7e, 0x7f, 0x56, 0x7f, 0xbd, 0x43,
	0xbc, 0xf5, 0x99, 0xb6, 0xe7, 0x06, 0x2e, 0x7e, 0x22, 0xee, 0x99, 0xb9, 0x3f, 0xab, 0x4e, 0xd5,
	0x5d, 0xbf, 0xe5, 0xfa, 0xfa, 0x8a, 0xe9, 0x13, 0x26, 0xa6, 0xdf, 0x9f, 0x5d, 0x21, 0x81, 0x39,
	0xab, 0xb7, 0xcd, 0x55, 0xcb, 0x31, 0x03, 0xcb, 0x75, 0x98, 0xa6, 0xca, 0xdb, 0x0c, 0xd6, 0xdb,
	0xc4, 0x87, 0x9e, 0xd1, 0x55, 0xd7, 0x5d, 0xb5, 0x89, 0x6e, 0xb6, 0x2d, 0xdd, 0x74, 0x1c, 0x37,
	0xa0, 0x6a, 0x51, 0xef, 0x08, 0x8c, 0x11, 0x99, 0x4f, 0xc3, 0x51, 0xf7, 0x9b, 0x2d, 0xcb, 0x71,
	0x75, 0xfa, 0x2f, 0x34, 0x1d, 0x58, 0x75, 0x57, 0x5d, 0xfa, 0x5f, 0x3d, 0xfc, 0x1f, 0xb4, 0x0e,
	0x33, 0x2b, 0x35, 0xd6, 0xc1, 0x7e, 0x44, 0x5d, 0x1c, 0xb0, 0xb6, 0xe9, 0x99, 0xad, 0xa8, 0xeb,
	0x10, 0xd7, 0xe5, 0xb8, 0x0d, 0x22, 0xd4, 0x79, 0xc3, 0xf5, 0xee, 0x11, 0x0f, 0xba, 0x54, 0xae,
	0xcb, 0x23, 0xed, 0x4e, 0x10, 0xf7, 0x55, 0x32, 0xf6, 0x9c, 0x3a, 0x11, 0xcf, 0x8e, 0xdb, 0xb6,
	0xea, 0xc2, 0x1e, 0x3f, 0x30, 0xef, 0x45, 0x3a, 0xa3, 0x5c, 0x8f, 0xe5, 0x34, 0x89, 0x47, 0x62,
	0x8b, 0xda, 0x01, 0x84, 0x5f, 0x09, 0x67, 0xea, 0x16, 0x25, 0x64, 0x90, 0xd7, 0x3b, 0xc4, 0x0f,
	0xb4, 0x9b, 0xe8, 0x49, 0xae, 0xd5, 0x6f, 0xbb, 0x8e, 0x4f, 0xf0, 0x05, 0x34, 0xc0, 0x88, 0x57,
	0x94, 0x71, 0x65, 0x72, 0xd7, 0xdc, 0x81, 0x99, 0xf4, 0x3a, 0xcf, 0x30, 0xe9, 0xa5, 0xa1, 0x0f,
	0x3e, 0x3d, 0xb2, 0xe3, 0x67, 0x9f, 0xbf, 0x37, 0xa5, 0x18, 0x20, 0xae, 0x55, 0xd0, 0x41, 0x6a,
	0xef, 0x35, 0x37, 0x30, 0xed, 0x57, 0x43, 0x70, 0xd1, 0x48, 0x16, 0x3a, 0xd4, 0xd5, 0x03, 0xa3,
	0x5d, 0x43, 0x03, 0x66, 0xcb, 0xed, 0x38, 0x01, 0x1d, 0x6d, 0x68, 0xe9, 0x4c, 0x68, 0xf7, 0x93,
	0x4f, 0x8f, 0x3c, 0xc5, 0xd6, 0xc5, 0x6f, 0xdc, 0x9b, 0xb1, 0x5c, 0xbd, 0x65, 0x06, 0x6b, 0x33,
	0xcb, 0x4e, 0xf0, 0xd7, 0x5f, 0x9d, 0x46, 0xb0, 0x60, 0xcb, 0x4e, 0x00, 0xc3, 0x33, 0xfd, 0x8b,
	0x8f, 0xfd, 0xfb, 0x27, 0x47, 0x14, 0xed, 0x36, 0x3a, 0x42, 0x87, 0x32, 0xd8, 0x64, 0xd3, 0xc1,
	0x96, 0x9d, 0xd7, 0xc2, 0x49, 0x04, 0x34, 0xb8, 0x82, 0x76, 0x9a, 0x8d, 0x86, 0x47, 0x7c, 0xc6,
	0x70, 0xc8, 0x88, 0x7e, 0xe2, 0x61, 0x34, 0x48, 0xa7, 0xbb, 0x66, 0x35, 0x2a, 0x7d, 0xe3, 0xca,
	0xe4, 0x63, 0xc6, 0x4e, 0xfa, 0x7b, 0xb9, 0xa1, 0x79, 0x68, 0x5c, 0x6e, 0x77, 0x9b, 0xb8, 0xd4,
	0xd0, 0xd3, 0x74, 0xcc, 0x97, 0x3a, 0x76, 0x60, 0xe5, 0x10, 0x1a, 0x45, 0x43, 0xc0, 0x80, 0x84,
	0x94, 0xfa, 0x27, 0x87, 0x8c, 0xa4, 0x21, 0x8f, 0xd4, 0x5d, 0x74, 0xac, 0x60, 0x00, 0x60, 0x36,
	0x8b, 0x76, 0x32, 0x64, 0xcc, 0xfe, 0xae, 0xb9, 0x43, 0xbc, 0x53, 0x80, 0x52, 0xd3, 0x35, 0x22,
	0x39, 0xcd, 0x45, 0x27, 0xa9, 0x6d, 0xda, 0x75, 0xd5, 0x73, 0x5b, 0x60, 0x1f, 0x4c, 0x2f, 0x3b,
	0xaf, 0x12, 0xbb, 0x19, 0x31, 0x38, 0x81, 0xf6, 0xc2, 0xee, 0xa8, 0xf1, 0x4b, 0xb3, 0x07, 0x9a,
	0x17, 0x8b, 0x57, 0xe8, 0x9b, 0x68, 0xaa, 0xcc, 0x80, 0xdb, 0xb4, 0x56, 0x11, 0xdd, 0x17, 0x88,
	0x4d, 0x56, 0xcd, 0x80, 0xa4, 0xa7, 0x71, 0xd9, 0x01, 0x28, 0xdb, 0x41, 0xb7, 0x60, 0xc0, 0x6d,
	0xa2, 0xfb, 0x53, 0x05, 0xcd, 0xf0, 0xb3, 0x0d, 0x38, 0x5c, 0x4f, 0x46, 0x7a, 0x1a, 0xed, 0x6f,
	0x44, 0x32, 0x19, 0xda, 0xfb, 0xe2, 0x8e, 0x88, 0xb8, 0x60, 0x86, 0xfa, 0x0a, 0x67, 0xa8, 0x9f,
	0x9f, 0xa1, 0x37, 0x15, 0xa4, 0x97, 0xc6, 0xb8, 0x6d, 0x6e, 0x71, 0x2c, 0x1f, 0xc2, 0x23, 0xcd,
	0x4e, 0x8e, 0x5b, 0x3c, 0x40, 0xc7, 0x8b, 0x06, 0xdc, 0x26, 0xaa, 0xf3, 0xf1, 0xf1, 0xdf, 0xb6,
	0xea, 0xe9, 0xe3, 0x9f, 0x83, 0xab, 0xf0, 0x70, 0x93, 0x9b, 0x21, 0x51, 0xda, 0x26, 0x7c, 0x0d,
	0x38, 0x4d, 0x6f, 0x92, 0x20, 0xbc, 0xa4, 0x6f, 0xb8, 0xbe, 0xbf, 0xd4, 0x71, 0x1a, 0x36, 0x59,
	0x0c, 0x96, 0x6c, 0xb7, 0x7e, 0xaf, 0x18, 0x2d, 0x9e, 0x40, 0x4f, 0xac, 0x84, 0xa2, 0xb5, 0x35,
	0x62, 0xad, 0xae, 0x05, 0x74, 0xee, 0xfb, 0x8d, 0x5d, 0xb4, 0xed, 0x1a, 0x6d, 0xd2, 0xea, 0xb0,
	0xe0, 0xf2, 0x51, 0x80, 0xde, 0x45, 0xb4, 0xcb, 0x76, 0x7d, 0xbf, 0xb6, 0x42, 0x7b, 0xe1, 0xae,
	0x1d, 0xe6, 0x8f, 0xd5, 0xdb, 0xa6, 0xdd, 0x21, 0x4c, 0xdd, 0x40, 0x76, 0x6c, 0x4a, 0x1b, 0x86,
	0x59, 0xbb, 0x49, 0x1e, 0x04, 0xcc, 0x91, 0x1b, 0xd1, 0x55, 0xfb, 0x1c, 0xaa, 0x74, 0x77, 0xc1,
	0x90, 0x1a, 0xda, 0xed, 0x90, 0x07, 0x41, 0x2d, 0x43, 0x6f, 0x97, 0x93, 0xc8, 0x6a, 0x33, 0x68,
	0x7f, 0xb2, 0x20, 0x25, 0x16, 0xf0, 0x2d, 0x05, 0x62, 0x0b, 0xde, 0xb9, 0x4e, 0xa2, 0xc7, 0xa9,
	0x04, 0xf0, 0x7a, 0x92, 0xe7, 0xc5, 0x64, 0x99, 0x04, 0x3e, 0x88, 0x06, 0xde, 0x48, 0xa6, 0x73,
	0xc8, 0x80, 0x5f, 0xe1, 0x8e, 0x20, 0xcd, 0x26, 0xa9, 0x07, 0xd6, 0x7d, 0x52, 0xf3, 0xc8, 0x7d,
	0xe2, 0x74, 0x08, 0xdd, 0xe2, 0x43, 0xc6, 0xbe, 0xb8, 0xc3, 0x60, 0xed, 0xda, 0x2a, 0xd0, 0x5e,
	0xa4, 0xad, 0xd4, 0x7e, 0x14, 0xe7, 0xe0, 0xeb, 0x08, 0x25, 0x11, 0x28, 0x00, 0x9a, 0xce, 0xdc,
	0x5f, 0x56, 0xab, 0x6d, 0x93, 0x2b, 0x1d, 0xcf, 0x77, 0xbd, 0x5b, 0xb1, 0x2c, 0x18, 0x30, 0x52,
	0xea, 0xda, 0x3b, 0x0a, 0x1a, 0x16, 0x8c, 0x04, 0xb4, 0xa7, 0xd1, 0x00, 0x25, 0x15, 0x5d, 0x93,
	0x42, 0xde, 0x20, 0x82, 0x6f, 0x70, 0xb8, 0xfa, 0x28, 0xae, 0x53, 0xe5, 0x70, 0xb1, 0xe1, 0x38,
	0x60, 0x5f, 0x43, 0x87, 0x29, 0xae, 0xe5, 0x28, 0xf6, 0xf3, 0xb7, 0xd4, 0xaf, 0xef, 0xa2, 0x31,
	0x99, 0x79, 0xe0, 0xbe, 0x80, 0x50, 0x1c, 0x77, 0x46, 0xb1, 0x63, 0x85, 0xa7, 0x93, 0x28, 0x1b,
	0x29, 0x59, 0xed, 0xab, 0x68, 0x94, 0xda, 0xbe, 0xea, 0x7a, 0xa4, 0x6e, 0xfa, 0xc1, 0xd6, 0x22,
	0xbf, 0x0d, 0x13, 0xd3, 0x6d, 0x1d, 0x80, 0x9f, 0x43, 0x43, 0xcd, 0xa8, 0x0f, 0x70, 0x67, 0xc2,
	0x9b, 0x58, 0xd5, 0x48, 0x24, 0x35, 0x82, 0x26, 0xa8, 0xdd, 0x3b, 0x34, 0xe2, 0xbf, 0x61, 0x06,
	0xc4, 0x0f, 0x62, 0x82, 0x25, 0xa0, 0x1f, 0x43, 0x7b, 0xd8, 0x63, 0x21, 0x73, 0xc3, 0xed, 0x66,
	0xad, 0x70, 0xd6, 0x6b, 0x6b, 0x48, 0xcb, 0x1b, 0x06, 0x38, 0x2c, 0xa1, 0x7d, 0x36, 0xed, 0xaa,
	0xc5, 0xf3, 0x2a, 0xa6, 0x92, 0xa8, 0xee, 0xb5, 0x79, 0x5b, 0xda, 0x33, 0x48, 0x4d, 0x8d, 0x74,
	0xd3, 0x6d, 0xb0, 0x88, 0x0e, 0x98, 0x1c, 0x46, 0xc8, 0xb6, 0x56, 0xda, 0x73, 0xed, 0xda, 0x3d,
	0xb2, 0x0e, 0x37, 0xd3, 0x10, 0x6b, 0xb9, 0x4e, 0xd6, 0xb5, 0xdb, 0x68, 0x44, 0xa8, 0x1c, 0x3f,
	0x2a, 0x86, 0xc2, 0x27, 0x53, 0x88, 0xce, 0x05, 0x60, 0x2a, 0x0f, 0xec, 0xe5, 0x66, 0xb3, 0xbe,
	0x66, 0x5a, 0x4e, 0xa8, 0x6a, 0x0c, 0x3a, 0x60, 0x40, 0x7b, 0x16, 0xec, 0xc2, 0x45, 0xdd, 0x23,
	0xaa, 0x3b, 0xe0, 0x59, 0x5d, 0xda, 0x5f, 0x14, 0xd6, 0x12, 0xb7, 0xf8, 0xb0, 0x56, 0x4b, 0xeb,
	0xb7, 0xe6, 0x6e, 0x5d, 0x27, 0xeb, 0x25, 0xc1, 0x3d, 0xc7, 0xad, 0x6c, 0x97, 0x0d, 0x80, 0x28,
	0x7d, 0xad, 0x68, 0x57, 0x40, 0xdf, 0xe0, 0x22, 0xa2, 0x1e, 0x41, 0x5c, 0x46, 0x47, 0x73, 0x8d,
	0x14, 0xa2, 0x78, 0x5f, 0xe1, 0xef, 0xd5, 0x47, 0x39, 0x7f, 0x2e, 0xa1, 0x91, 0xf4, 0x2e, 0xae,
	0xd9, 0x26, 0xe7, 0xc8, 0x6c, 0x53, 0x57, 0x52, 0x9b, 0xfa, 0x86, 0x99, 0x72, 0x5c, 0x7c, 0x01,
	0x55, 0xba, 0xd5, 0x3d, 0xf2, 0x86, 0xe9, 0xb1, 0x98, 0xb0, 0xdf, 0x78, 0x2a, 0xa3, 0x6b, 0xd0,
	0x4e, 0xad, 0x0a, 0x31, 0x34, 0xdb, 0x55, 0x8f, 0x4e, 0x20, 0x8e, 0x2d, 0x96, 0xfd, 0xc8, 0xff,
	0x9d, 0x3a, 0xf9, 0x92, 0xd3, 0xec, 0xd8, 0x4d, 0xcb, 0xb6, 0x49, 0x63, 0x6b, 0x4e, 0xb2, 0x26,
	0xc4, 0x16, 0xf2, 0x51, 0x60, 0xb5, 0x2e, 0xa1, 0x11, 0xcb, 0xaf, 0xc1, 0xe9, 0x42, 0x53, 0x0b,
	0xb5, 0x4e, 0x22, 0x46, 0x47, 0x1e, 0x34, 0x2a, 0x96, 0xc4, 0x8c, 0xb6, 0x08, 0x6c, 0x38, 0xd3,
	0xb0, 0x81, 0xe8, 0xe1, 0x5d, 0x3c, 0x21, 0x51, 0x18, 0x24, 0x37, 0x11, 0x87, 0x41, 0x03, 0x14,
	0x60, 0x74, 0xf2, 0x6a, 0xfc, 0xf6, 0xe3, 0xdf, 0x10, 0xa0, 0x0b, 0x1a, 0xda, 0xf3, 0xe0, 0xbb,
	0xa9, 0x41, 0x52, 0x8c, 0xca, 0xc0, 0x7c, 0xad, 0x9b, 0x29, 0x6f, 0x01, 0x50, 0x9e, 0xca, 0xa0,
	0xcc, 0xe4, 0x44, 0x32, 0xb8, 0xbe, 0x0c, 0xb9, 0x02, 0xe6, 0x49, 0x1e, 0xf8, 0x95, 0x41, 0x56,
	0x3d, 0x12, 0x94, 0xf0, 0x84, 0x61, 0x34, 0x68, 0xd6, 0xc3, 0x67, 0x00, 0x44, 0xf7, 0xe1, 0x66,
	0x0b, 0x7f, 0xd3, 0xe8, 0x7e, 0x22, 0xc7, 0x32, 0x80, 0x3d, 0x8f, 0x06, 0x3c, 0xda, 0x02, 0x60,
	0xc7, 0x32, 0x41, 0x88, 0xd5, 0x22, 0x7e, 0x60, 0xb6, 0xda, 0xa4, 0x41, 0xe3, 0x4b, 0x03, 0xa4,
	0xf1, 0x48, 0x78, 0x18, 0x06, 0xb5, 0xa6, 0xdb, 0x71, 0xd8, 0xc0, 0x83, 0xe1, 0x81, 0x17, 0x5c,
	0x0d, 0x7f, 0x6b, 0x24, 0xf6, 0xbd, 0xf4, 0x3a, 0x6e, 0xb9, 0x8b, 0x5b, 0xf0, 0x7c, 0xc9, 0x19,
	0x06, 0x58, 0x5e, 0x46, 0xa3, 0x96, 0x5f, 0x8b, 0x1e, 0x89, 0x32, 0x27, 0x1f, 0xb6, 0x64, 0x86,
	0xb4, 0xd7, 0xf9, 0x48, 0x5d, 0x1e, 0xd8, 0x5c, 0x43, 0xd8, 0x61, 0x32, 0xb5, 0xae, 0x00, 0x27,
	0x27, 0x60, 0xdf, 0xef, 0x64, 0x0d, 0x6b, 0xff, 0xe9, 0x43, 0xd3, 0xa5, 0x0e, 0x9c, 0xad, 0x1e,
	0x19, 0x5f, 0x47, 0x7b, 0x99, 0x05, 0xaf, 0xc6, 0xc2, 0xeb, 0x30, 0xda, 0xe8, 0x17, 0xed, 0xb7,
	0xd0, 0x15, 0xc2, 0x2b, 0xce, 0x6b, 0x91, 0xc6, 0x1d, 0x2a, 0x6a, 0xec, 0x01, 0x55, 0xf6, 0xd3,
	0xc7, 0xaf, 0x20, 0x1c, 0x85, 0x41, 0x29, 0x7b, 0xfd, 0xa5, 0xed, 0xed, 0x4f, 0xb4, 0x23, 0x93,
	0x26, 0x1a, 0x8e, 0x1a, 0x97, 0x5b, 0x6d, 0xdb, 0x22, 0x8d, 0x04, 0x7c, 0xe5, 0x31, 0x6a, 0xf9,
	0x28, 0x6f, 0x19, 0x6e, 0xcd, 0x20, 0xf0, 0xac, 0x95, 0x4e, 0x10, 0xf9, 0xb2, 0xdc, 0x8a, 0xf6,
	0x75, 0x74, 0x82, 0x3b, 0x3d, 0x0d, 0xb2, 0x6a, 0x85, 0x10, 0x42, 0x21, 0xfe, 0x11, 0x95, 0xe7,
	0xc3, 0xa9, 0x8b, 0xb0, 0x8f, 0xbf, 0x08, 0x5f, 0x46, 0x93, 0xc5, 0xf6, 0x61, 0x61, 0x8f, 0xa2,
	0xdd, 0xd4, 0x79, 0x23, 0x09, 0xf0, 0xd6, 0x27, 0x42, 0x6f, 0x8d, 0xda, 0xb4, 0x5a, 0x6c, 0x30,
	0x3e, 0x05, 0xb7, 0x16, 0xf1, 0x2d, 0xc8, 0x59, 0xe5, 0x0f, 0xd0, 0x0b, 0xe4, 0x05, 0x88, 0xb7,
	0x96, 0xfd, 0x3b, 0x6b, 0x56, 0x40, 0x6c, 0xcb, 0x0f, 0x16, 0x1b, 0x2d, 0xcb, 0x29, 0x4c, 0xbd,
	0x6a, 0x17, 0xa3, 0xe7, 0x4b, 0x97, 0x26, 0x8c, 0x3f, 0x8c, 0x06, 0x2d, 0xbf, 0x66, 0x86, 0x6d,
	0x30, 0xf4, 0x4e, 0xcb, 0xa7, 0x22, 0xda, 0x55, 0x38, 0x15, 0x21, 0x7f, 0xd0, 0x72, 0xef, 0x9b,
	0xb6, 0x7f, 0xd5, 0xf5, 0xb8, 0xdb, 0x3b, 0x7b, 0xf8, 0x28, 0xdd, 0x87, 0xcf, 0x37, 0x20, 0xa0,
	0x92, 0xd8, 0x89, 0x6f, 0xac, 0x41, 0x0f, 0xfa, 0xe0, 0x95, 0x37, 0x26, 0x48, 0x86, 0x82, 0x3a,
	0x8d, 0x36, 0x63, 0x79, 0xed, 0xa6, 0x28, 0x4b, 0xf8, 0x05, 0x10, 0xb7, 0x45, 0x49, 0x40, 0x29,
	0xf2, 0xa5, 0x2e, 0xe4, 0xc7, 0x79, 0xe4, 0x22, 0x33, 0x19, 0x06, 0xaf, 0xc2, 0x0a, 0x77, 0x89,
	0x94, 0x72, 0x44, 0x38, 0xae, 0x23, 0x47, 0x84, 0x9f, 0xda, 0x57, 0x60, 0xf1, 0xbb, 0x8d, 0xc6,
	0x6f, 0xcb, 0x9d, 0x80, 0x40, 0x7c, 0xa7, 0x75, 0x29, 0x46, 0xe2, 0xda, 0x3a, 0xdc, 0xf0, 0x52,
	0x6a, 0xc5, 0xb8, 0x47, 0xd1, 0x50, 0x9c, 0x81, 0x03, 0xe4, 0x49, 0x43, 0x9a, 0x55, 0x3f, 0xcf,
	0xca, 0x82, 0x0b, 0x46, 0x3e, 0x34, 0xb0, 0x7b, 0x3e, 0xcb, 0xae, 0xec, 0xb2, 0xc4, 0x2c, 0x17,
	0xe0, 0x95, 0x44, 0x37, 0x6d, 0x18, 0xe0, 0x5e, 0x71, 0x5b, 0x2d, 0x2b, 0x28, 0x15, 0xb9, 0x8e,
	0x8a, 0x35, 0x01, 0xdb, 0x0b, 0x68, 0x17, 0x0d, 0xa7, 0xeb, 0xb4, 0x19, 0xf0, 0x1d, 0x95, 0x46,
	0x14, 0x8b, 0x61, 0xa0, 0x42, 0xaf, 0x5a, 0x03, 0xd9, 0xb1, 0xb5, 0xb9, 0xdf, 0x9f, 0x43, 0x8f,
	0xd3, 0x61, 0xf0, 0x3d, 0x34, 0xc0, 0x2a, 0x48, 0x78, 0x9c, 0x37, 0xd2, 0x5d, 0xa0, 0x52, 0x27,
	0x72, 0x24, 0x18, 0x3c, 0x6d, 0xf4, 0x3b, 0x1f, 0xfd, 0xf3, 0x87, 0x7d, 0x07, 0xf1, 0x01, 0x5d,
	0x50, 0xb9, 0xc3, 0x6f, 0x2b, 0x68, 0x4f, 0x95, 0x04, 0xa9, 0x5c, 0x18, 0x3e, 0x26, 0xb0, 0xd9,
	0x9d, 0x46, 0x53, 0x8f, 0x17, 0x89, 0xc1, 0xf8, 0x93, 0xdf, 0xfd, 0xfc, 0xbd, 0x29, 0x85, 0x82,
	0x38, 0x8c, 0x47, 0x78, 0x10, 0x5c, 0xae, 0x0d, 0x6f, 0xa0, 0xc1, 0x2a, 0x61, 0xfa, 0xf8, 0x88,
	0xc0, 0x7a, 0x3a, 0xe1, 0xa6, 0x8e, 0xcb, 0x05, 0x60, 0xe0, 0x53, 0xc9, 0xc0, 0x13, 0xf8, 0x88,
	0xde, 0x5d, 0x32, 0xf4, 0xf5, 0x8d, 0x68, 0xec, 0x4d, 0xfc, 0x3d, 0x05, 0xed, 0xad, 0x92, 0x20,
	0x9d, 0xb3, 0xc2, 0x22, 0x8a, 0x82, 0xf4, 0x99, 0x7a, 0xa2, 0x50, 0xae, 0xc4, 0x5c, 0x98, 0x2c,
	0x8d, 0x07, 0x99, 0xaf, 0x4f, 0x15, 0x34, 0x51, 0x25, 0x81, 0x30, 0xa5, 0xb1, 0xb4, 0x1e, 0x2d,
	0x95, 0x2e, 0x18, 0x38, 0x2f, 0xd9, 0xa2, 0x9e, 0x29, 0xaf, 0x00, 0x90, 0x6f, 0x27, 0x90, 0xaf,
	0xe3, 0xe5, 0x82, 0x59, 0x84, 0xda, 0xae, 0xaf, 0x6f, 0xf0, 0x79, 0x9b, 0x4d, 0x3d, 0x9b, 0x7a,
	0xc1, 0xbf, 0x54, 0xd0, 0x81, 0x2a, 0x09, 0xba, 0x22, 0x3b, 0x3c, 0x2d, 0x80, 0x28, 0x7b, 0x70,
	0xaa, 0xa7, 0xca, 0x09, 0x03, 0x97, 0xcb, 0x09, 0x97, 0xb3, 0x78, 0x4e, 0x17, 0x17, 0x84, 0x39,
	0x3e, 0x1b, 0xe9, 0xeb, 0x65, 0x13, 0xbf, 0xab, 0xa0, 0x27, 0xab, 0x24, 0xc8, 0xe6, 0xc9, 0xf0,
	0x94, 0x00, 0x86, 0x24, 0x55, 0xa7, 0x4e, 0x97, 0x92, 0x05, 0xc4, 0xcf, 0x25, 0x88, 0xe7, 0xf1,
	0x2c, 0x8f, 0x38, 0xce, 0xb3, 0xe5, 0x00, 0xfe, 0x93, 0x82, 0x46, 0xe8, 0xf6, 0x16, 0xa7, 0xda,
	0xf1, 0x9c, 0x70, 0x13, 0xe7, 0x66, 0xff, 0xd5, 0xf9, 0x9e, 0x74, 0x80, 0xc8, 0x62, 0x42, 0xe4,
	0x3c, 0x3e, 0x9b, 0x3d, 0x05, 0x58, 0x00, 0x6f, 0xbb, 0x7e, 0x1e, 0x97, 0xb7, 0x14, 0xb4, 0x9b,
	0x9e, 0x0f, 0x51, 0x85, 0x1c, 0x3f, 0x2d, 0x3c, 0x03, 0x32, 0xa5, 0x75, 0xf5, 0x58, 0x81, 0x14,
	0x20, 0x3c, 0x9e, 0x20, 0x1c, 0xc1, 0xc3, 0x59, 0x47, 0x0f, 0x4c, 0xbb, 0x46, 0xbf, 0x26, 0xc0,
	0xbf, 0x51, 0xd0, 0xc1, 0x6a, 0xf8, 0x96, 0xec, 0xaa, 0x05, 0xe3, 0xd3, 0x82, 0x91, 0xe4, 0x45,
	0x69, 0x75, 0xa6, 0xac, 0x38, 0x20, 0xbc, 0x94, 0x20, 0x9c, 0xc3, 0x67, 0x74, 0xd1, 0x97, 0x13,
	0x0c, 0xa3, 0xbe, 0x11, 0xef, 0xbb, 0xd4, 0x09, 0xf7, 0x3b, 0xe6, 0x0b, 0xb2, 0x4a, 0xb6, 0xd0,
	0x17, 0x0a, 0xea, 0xea, 0x42, 0x5f, 0x28, 0x2a, 0x95, 0x6b, 0xe7, 0x12, 0x1e, 0x53, 0x78, 0x52,
	0xc8, 0xc3, 0x67, 0x44, 0xb8, 0x13, 0xfa, 0x1f, 0x0a, 0x1a, 0xaf, 0x92, 0x20, 0xb7, 0x78, 0x8d,
	0x2f, 0x08, 0x00, 0x95, 0xa9, 0xaf, 0xab, 0x0b, 0xbd, 0x2b, 0x02, 0x9d, 0xff, 0x4f, 0xe8, 0x5c,
	0xc6, 0x97, 0x72, 0x96, 0xa5, 0xe6, 0x13, 0xbb, 0xa9, 0x6f, 0x64, 0xaa, 0xb6, 0xdc, 0x1a, 0xfd,
	0x8b, 0x71, 0xcc, 0xad, 0x58, 0x0b, 0x39, 0x96, 0x29, 0xaa, 0x0b, 0x39, 0x96, 0x2a, 0x8e, 0x6b,
	0x37, 0x13, 0x8e, 0x57, 0xf0, 0xa2, 0x98, 0x23, 0x04, 0x7c, 0x24, 0xf2, 0xc1, 0x3c, 0x9e, 0xdf,
	0xee, 0x43, 0xc7, 0xd2, 0x6b, 0x29, 0x2d, 0x3b, 0xe3, 0x67, 0xf3, 0xd6, 0xa5, 0xa8, 0xa2, 0xae,
	0x5e, 0x7a, 0x44, 0x6d, 0xa0, 0x7d, 0x37, 0xa1, 0xfd, 0x32, 0x7e, 0x89, 0xa7, 0x9d, 0xa5, 0xdb,
	0x55, 0x9b, 0xde, 0xcc, 0x9f, 0x82, 0x8f, 0x14, 0x34, 0x9a, 0x37, 0x05, 0x78, 0xbe, 0x17, 0xec,
	0x11, 0xe1, 0xb3, 0xbd, 0x29, 0x01, 0xcf, 0x6b, 0x09, 0xcf, 0x4b, 0xf8, 0x99, 0xde, 0x79, 0x26,
	0xac, 0xde, 0x8e, 0x0e, 0xe9, 0xa8, 0x58, 0x2d, 0x39, 0xa4, 0x33, 0x05, 0x70, 0xc9, 0x21, 0x9d,
	0xad, 0x78, 0x6b, 0xd3, 0x09, 0xd0, 0x71, 0x3c, 0xa6, 0x77, 0x7f, 0xec, 0x95, 0xc6, 0xf2, 0x5b,
	0x05, 0x55, 0xa2, 0x19, 0xce, 0xbe, 0xf8, 0x84, 0xa1, 0x53, 0xde, 0x5b, 0x53, 0x18, 0x3a, 0xe5,
	0x3e, 0x26, 0xb5, 0x85, 0x04, 0xec, 0x69, 0x3c, 0x2d, 0x00, 0x5b, 0x8b, 0xde, 0x8c, 0xd9, 0xab,
	0xee, 0x63, 0xc1, 0x31, 0xd0, 0xc5, 0xa0, 0xf0, 0x18, 0x90, 0x31, 0x59, 0xe8, 0x5d, 0xb1, 0xc4,
	0x2d, 0xce, 0xfb, 0x89, 0x94, 0xda, 0xcf, 0x59, 0x08, 0x95, 0x7d, 0xa8, 0x09, 0x43, 0x28, 0xc9,
	0x4b, 0x54, 0x18, 0x42, 0xc9, 0x9e, 0x8e, 0xb9, 0xb7, 0x26, 0x07, 0x95, 0x0b, 0x3d, 0x60, 0xe7,
	0x6e, 0xe2, 0x4f, 0xd8, 0xad, 0x29, 0x7b, 0x60, 0x0a, 0x6f, 0xcd, 0x82, 0x97, 0xb4, 0xf0, 0xd6,
	0x2c, 0x7a, 0x02, 0x6b, 0x46, 0xc2, 0xa3, 0x8a, 0x5f, 0x2c, 0x33, 0xf7, 0x1c, 0xa1, 0x78, 0xdb,
	0xa6, 0xc9, 0xfd, 0x48, 0x41, 0xfb, 0xe3, 0x57, 0x46, 0x54, 0xfa, 0xc3, 0x93, 0xd2, 0x47, 0x42,
	0xa6, 0xb6, 0xa8, 0x9e, 0x2c, 0x21, 0x09, 0xf0, 0x67, 0x12, 0xf8, 0x47, 0xf1, 0x84, 0x2e, 0xf8,
	0x22, 0x54, 0xdf, 0x48, 0xaa, 0x70, 0x9b, 0xf8, 0xc7, 0x0a, 0xc2, 0x49, 0x98, 0x15, 0x63, 0x3b,
	0x29, 0x8f, 0x99, 0xb2, 0xe0, 0xa6, 0xca, 0x88, 0x02, 0x3a, 0x3d, 0x41, 0xf7, 0x34, 0xd6, 0x84,
	0xf7, 0x1b, 0x0f, 0xef, 0xd7, 0xec, 0x6c, 0x11, 0x16, 0x26, 0x73, 0x9e, 0x65, 0xe2, 0x0a, 0x64,
	0xce, 0xb3, 0x4c, 0x52, 0x6d, 0xd4, 0xce, 0x27, 0x80, 0xa7, 0xf1, 0x49, 0xd1, 0x74, 0x46, 0xc7,
	0x33, 0x8f, 0xfb, 0x7d, 0x05, 0x0d, 0x27, 0xd3, 0x9a, 0x05, 0x7e, 0x46, 0x3e, 0x65, 0x12, 0xe4,
	0xb3, 0x3d, 0x68, 0x00, 0xf4, 0x0b, 0x09, 0xf4, 0x53, 0x78, 0x4a, 0x1c, 0x4b, 0x08, 0xb1, 0xff,
	0x45, 0x41, 0x23, 0x39, 0xa9, 0x63, 0x7c, 0x4e, 0xf4, 0x18, 0x2c, 0x4c, 0x65, 0xab, 0xe7, 0x7b,
	0x55, 0x2b, 0x71, 0x18, 0xc2, 0x12, 0x24, 0xb9, 0x60, 0x6e, 0x2f, 0x46, 0x17, 0x27, 0x8d, 0x01,
	0xf2, 0x52, 0xcb, 0x58, 0x8c, 0xad, 0x30, 0xd9, 0xad, 0x5e, 0xe8, 0x59, 0x0f, 0x48, 0x2d, 0x25,
	0xa4, 0x2e, 0xe0, 0x73, 0xe2, 0xc5, 0x29, 0x62, 0xf5, 0x4e, 0x5f, 0xfa, 0xd1, 0xd9, 0xfd, 0xc2,
	0xcf, 0x79, 0x74, 0x4a, 0x1f, 0xfa, 0xf3, 0x3d, 0xe9, 0x00, 0x99, 0xef, 0x2b, 0x09, 0x9b, 0x37,
	0x15, 0xfc, 0x2d, 0xf1, 0xb3, 0x53, 0xfc, 0xf2, 0xe7, 0x0b, 0xec, 0xfc, 0x2d, 0x96, 0xa9, 0xbe,
	0x83, 0x30, 0x2b, 0xa7, 0x8b, 0x24, 0x59, 0xcf, 0x26, 0xfe, 0x33, 0xdb, 0x7c, 0xe2, 0xd2, 0x16,
	0x16, 0x5d, 0xcb, 0xa5, 0xca, 0xee, 0xea, 0xff, 0x3d, 0x82, 0x66, 0x89, 0x18, 0x25, 0x77, 0x82,
	0xc2, 0x18, 0x25, 0x5c, 0x65, 0x59, 0xa5, 0x5d, 0xb8, 0xca, 0x05, 0xc5, 0x7f, 0xe1, 0x2a, 0x17,
	0x95, 0xf2, 0xb5, 0x5b, 0x09, 0x85, 0x17, 0xf1, 0x95, 0x4c, 0x56, 0x47, 0x5e, 0xe3, 0xcf, 0xc9,
	0x34, 0xfc, 0x8d, 0x85, 0xe6, 0xd2, 0x0a, 0x2b, 0x9e, 0xcf, 0xdb, 0x5e, 0x32, 0x72, 0x67, 0x7b,
	0x53, 0x02, 0x76, 0xaf, 0x24, 0xec, 0xae, 0xe2, 0x17, 0xba, 0xd8, 0x49, 0xab, 0xbb, 0x39, 0xf4,
	0xfe, 0xa8, 0x20, 0xb5, 0x4a, 0x02, 0x49, 0x45, 0x1f, 0x8b, 0x8e, 0xf4, 0xfc, 0xef, 0x07, 0xd4,
	0xb9, 0x5e, 0x54, 0x4a, 0x24, 0xe3, 0x52, 0x3c, 0xb8, 0xf5, 0xe3, 0x1c, 0xf0, 0x03, 0xe6, 0x80,
	0xb2, 0xef, 0x27, 0x70, 0x01, 0x28, 0xd1, 0xf7, 0x1a, 0x42, 0x07, 0x2c, 0xfa, 0x40, 0x43, 0x7b,
	0x3e, 0x61, 0x72, 0x0e, 0xcf, 0xcb, 0x99, 0x70, 0x6b, 0xc5, 0x51, 0xf9, 0x83, 0x82, 0x0e, 0xc5,
	0xc9, 0x50, 0xfe, 0x9b, 0x05, 0x3c, 0x23, 0x4d, 0x71, 0x0a, 0x3f, 0x9b, 0x50, 0xf5, 0xd2, 0xf2,
	0x00, 0xbf, 0x9a, 0xc0, 0x7f, 0x16, 0x5f, 0x14, 0x65, 0x45, 0xbd, 0x5a, 0x74, 0x14, 0xb0, 0xef,
	0x20, 0xf8, 0x63, 0x1f, 0x3e, 0xc4, 0xa0, 0x21, 0xdb, 0xbe, 0x6c, 0x71, 0x52, 0x18, 0xd7, 0x4b,
	0x6a, 0x9f, 0xc2, 0xb8, 0x5e, 0x56, 0xed, 0xd4, 0x74, 0x8a, 0xf8, 0x24, 0x3e, 0x91, 0xb9, 0x79,
	0x23, 0x69, 0x56, 0x08, 0x4d, 0x5d, 0x4b, 0xef, 0xb2, 0x5d, 0x1d, 0x97, 0x71, 0x98, 0x57, 0xb2,
	0xf2, 0x8b, 0x34, 0xb6, 0x14, 0x97, 0x8b, 0x84, 0xb1, 0xa5, 0xa4, 0x3e, 0x94, 0x1b, 0xef, 0xb0,
	0x79, 0x4c, 0x95, 0x8f, 0xd2, 0x5e, 0xf1, 0x0b, 0x05, 0x1d, 0x4e, 0x03, 0x06, 0xef, 0xfb, 0xdf,
	0x45, 0xbc, 0x64, 0x7c, 0xf0, 0xd9, 0x98, 0xf2, 0xe1, 0x67, 0x63, 0xca, 0xdf, 0x3f, 0x1b, 0x53,
	0x7e, 0xf0, 0x70, 0x6c, 0xc7, 0x87, 0x0f, 0xc7, 0x76, 0x7c, 0xfc, 0x70, 0x6c, 0xc7, 0xdd, 0x85,
	0x55, 0x2b, 0x58, 0xeb, 0xac, 0xcc, 0xd4, 0xdd, 0x96, 0x6e, 0xda, 0xb6, 0xeb, 0x99, 0xa7, 0xc1,
	0xa7, 0xa2, 0x9f, 0xf4, 0x1b, 0x42, 0xfd, 0x41, 0x6a, 0x34, 0xfa, 0x57, 0x6f, 0x2b, 0x03, 0xf4,
	0x0f, 0xb4, 0xe6, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x85, 0x15, 0x9e, 0x66, 0x37, 0x00,
	0x00,
}

func (this *QueryTotalStakeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryTotalStakeResponse)
	if !ok {
		that2, ok := that.(QueryTotalStakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryReputerStakeInTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryReputerStakeInTopicResponse)
	if !ok {
		that2, ok := that.(QueryReputerStakeInTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryStakeFromReputerInTopicInSelfResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryStakeFromReputerInTopicInSelfResponse)
	if !ok {
		that2, ok := that.(QueryStakeFromReputerInTopicInSelfResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryDelegateStakeInTopicInReputerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryDelegateStakeInTopicInReputerResponse)
	if !ok {
		that2, ok := that.(QueryDelegateStakeInTopicInReputerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryStakeFromDelegatorInTopicInReputerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryStakeFromDelegatorInTopicInReputerResponse)
	if !ok {
		that2, ok := that.(QueryStakeFromDelegatorInTopicInReputerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryStakeFromDelegatorInTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryStakeFromDelegatorInTopicResponse)
	if !ok {
		that2, ok := that.(QueryStakeFromDelegatorInTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryTopicStakeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryTopicStakeResponse)
	if !ok {
		that2, ok := that.(QueryTopicStakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	GetNextTopicId(ctx context.Context, in *QueryNextTopicIdRequest, opts ...grpc.CallOption) (*QueryNextTopicIdResponse, error)
	GetTopic(ctx context.Context, in *QueryTopicRequest, opts ...grpc.CallOption) (*QueryTopicResponse, error)
	GetActiveTopics(ctx context.Context, in *QueryActiveTopicsRequest, opts ...grpc.CallOption) (*QueryActiveTopicsResponse, error)
	GetWorkerLatestInferenceByTopicId(ctx context.Context, in *QueryWorkerLatestInferenceRequest, opts ...grpc.CallOption) (*QueryWorkerLatestInferenceResponse, error)
	GetInferencesAtBlock(ctx context.Context, in *QueryInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryInferencesAtBlockResponse, error)
	GetForecastsAtBlock(ctx context.Context, in *QueryForecastsAtBlockRequest, opts ...grpc.CallOption) (*QueryForecastsAtBlockResponse, error)
	GetNetworkLossBundleAtBlock(ctx context.Context, in *QueryNetworkLossBundleAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkLossBundleAtBlockResponse, error)
	GetTotalStake(ctx context.Context, in *QueryTotalStakeRequest, opts ...grpc.CallOption) (*QueryTotalStakeResponse, error)
	GetReputerStakeInTopic(ctx context.Context, in *QueryReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryReputerStakeInTopicResponse, error)
	GetMultiReputerStakeInTopic(ctx context.Context, in *QueryMultiReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryMultiReputerStakeInTopicResponse, error)
	GetStakeFromReputerInTopicInSelf(ctx context.Context, in *QueryStakeFromReputerInTopicInSelfRequest, opts ...grpc.CallOption) (*QueryStakeFromReputerInTopicInSelfResponse, error)
	GetDelegateStakeInTopicInReputer(ctx context.Context, in *QueryDelegateStakeInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryDelegateStakeInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopicInReputer(ctx context.Context, in *QueryStakeFromDelegatorInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopic(ctx context.Context, in *QueryStakeFromDelegatorInTopicRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicResponse, error)
	GetTopicStake(ctx context.Context, in *QueryTopicStakeRequest, opts ...grpc.CallOption) (*QueryTopicStakeResponse, error)
	GetStakeRemovalsForBlock(ctx context.Context, in *QueryStakeRemovalsForBlockRequest, opts ...grpc.CallOption) (*QueryStakeRemovalsForBlockResponse, error)
	GetDelegateStakeRemovalsForBlock(ctx context.Context, in *QueryDelegateStakeRemovalsForBlockRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalsForBlockResponse, error)
	GetStakeRemovalInfo(ctx context.Context, in *QueryStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryStakeRemovalInfoResponse, error)
	GetDelegateStakeRemovalInfo(ctx context.Context, in *QueryDelegateStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalInfoResponse, error)
	GetWorkerNodeInfo(ctx context.Context, in *QueryWorkerNodeInfoRequest, opts ...grpc.CallOption) (*QueryWorkerNodeInfoResponse, error)
	GetReputerNodeInfo(ctx context.Context, in *QueryReputerNodeInfoRequest, opts ...grpc.CallOption) (*QueryReputerNodeInfoResponse, error)
	GetWorkerAddressByP2PKey(ctx context.Context, in *QueryWorkerAddressByP2PKeyRequest, opts ...grpc.CallOption) (*QueryWorkerAddressByP2PKeyResponse, error)
	GetReputerAddressByP2PKey(ctx context.Context, in *QueryReputerAddressByP2PKeyRequest, opts ...grpc.CallOption) (*QueryReputerAddressByP2PKeyResponse, error)
	IsWorkerRegisteredInTopicId(ctx context.Context, in *QueryIsWorkerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsWorkerRegisteredInTopicIdResponse, error)
	IsReputerRegisteredInTopicId(ctx context.Context, in *QueryIsReputerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsReputerRegisteredInTopicIdResponse, error)
	GetNetworkInferencesAtBlock(ctx context.Context, in *QueryNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkInferencesAtBlockResponse, error)
	GetLatestNetworkInference(ctx context.Context, in *QueryLatestNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryLatestNetworkInferencesAtBlockResponse, error)
	GetIsWorkerNonceUnfulfilled(ctx context.Context, in *QueryIsWorkerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsWorkerNonceUnfulfilledResponse, error)
	GetIsReputerNonceUnfulfilled(ctx context.Context, in *QueryIsReputerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsReputerNonceUnfulfilledResponse, error)
	GetUnfulfilledWorkerNonces(ctx context.Context, in *QueryUnfulfilledWorkerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledWorkerNoncesResponse, error)
	GetUnfulfilledReputerNonces(ctx context.Context, in *QueryUnfulfilledReputerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledReputerNoncesResponse, error)
	GetInfererNetworkRegret(ctx context.Context, in *QueryInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryInfererNetworkRegretResponse, error)
	IsWhitelistAdmin(ctx context.Context, in *QueryIsWhitelistAdminRequest, opts ...grpc.CallOption) (*QueryIsWhitelistAdminResponse, error)
	GetTopicLastWorkerCommitInfo(ctx context.Context, in *QueryTopicLastCommitRequest, opts ...grpc.CallOption) (*QueryTopicLastCommitResponse, error)
	GetTopicLastReputerCommitInfo(ctx context.Context, in *QueryTopicLastCommitRequest, opts ...grpc.CallOption) (*QueryTopicLastCommitResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextTopicId(ctx context.Context, in *QueryNextTopicIdRequest, opts ...grpc.CallOption) (*QueryNextTopicIdResponse, error) {
	out := new(QueryNextTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetNextTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopic(ctx context.Context, in *QueryTopicRequest, opts ...grpc.CallOption) (*QueryTopicResponse, error) {
	out := new(QueryTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetActiveTopics(ctx context.Context, in *QueryActiveTopicsRequest, opts ...grpc.CallOption) (*QueryActiveTopicsResponse, error) {
	out := new(QueryActiveTopicsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetActiveTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerLatestInferenceByTopicId(ctx context.Context, in *QueryWorkerLatestInferenceRequest, opts ...grpc.CallOption) (*QueryWorkerLatestInferenceResponse, error) {
	out := new(QueryWorkerLatestInferenceResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetWorkerLatestInferenceByTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInferencesAtBlock(ctx context.Context, in *QueryInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryInferencesAtBlockResponse, error) {
	out := new(QueryInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetInferencesAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetForecastsAtBlock(ctx context.Context, in *QueryForecastsAtBlockRequest, opts ...grpc.CallOption) (*QueryForecastsAtBlockResponse, error) {
	out := new(QueryForecastsAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetForecastsAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNetworkLossBundleAtBlock(ctx context.Context, in *QueryNetworkLossBundleAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkLossBundleAtBlockResponse, error) {
	out := new(QueryNetworkLossBundleAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetNetworkLossBundleAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalStake(ctx context.Context, in *QueryTotalStakeRequest, opts ...grpc.CallOption) (*QueryTotalStakeResponse, error) {
	out := new(QueryTotalStakeResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTotalStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputerStakeInTopic(ctx context.Context, in *QueryReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryReputerStakeInTopicResponse, error) {
	out := new(QueryReputerStakeInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetReputerStakeInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMultiReputerStakeInTopic(ctx context.Context, in *QueryMultiReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryMultiReputerStakeInTopicResponse, error) {
	out := new(QueryMultiReputerStakeInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetMultiReputerStakeInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeFromReputerInTopicInSelf(ctx context.Context, in *QueryStakeFromReputerInTopicInSelfRequest, opts ...grpc.CallOption) (*QueryStakeFromReputerInTopicInSelfResponse, error) {
	out := new(QueryStakeFromReputerInTopicInSelfResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeFromReputerInTopicInSelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeInTopicInReputer(ctx context.Context, in *QueryDelegateStakeInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryDelegateStakeInTopicInReputerResponse, error) {
	out := new(QueryDelegateStakeInTopicInReputerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetDelegateStakeInTopicInReputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeFromDelegatorInTopicInReputer(ctx context.Context, in *QueryStakeFromDelegatorInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicInReputerResponse, error) {
	out := new(QueryStakeFromDelegatorInTopicInReputerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeFromDelegatorInTopicInReputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeFromDelegatorInTopic(ctx context.Context, in *QueryStakeFromDelegatorInTopicRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicResponse, error) {
	out := new(QueryStakeFromDelegatorInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeFromDelegatorInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicStake(ctx context.Context, in *QueryTopicStakeRequest, opts ...grpc.CallOption) (*QueryTopicStakeResponse, error) {
	out := new(QueryTopicStakeResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopicStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeRemovalsForBlock(ctx context.Context, in *QueryStakeRemovalsForBlockRequest, opts ...grpc.CallOption) (*QueryStakeRemovalsForBlockResponse, error) {
	out := new(QueryStakeRemovalsForBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeRemovalsForBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeRemovalsForBlock(ctx context.Context, in *QueryDelegateStakeRemovalsForBlockRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalsForBlockResponse, error) {
	out := new(QueryDelegateStakeRemovalsForBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetDelegateStakeRemovalsForBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeRemovalInfo(ctx context.Context, in *QueryStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryStakeRemovalInfoResponse, error) {
	out := new(QueryStakeRemovalInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeRemovalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeRemovalInfo(ctx context.Context, in *QueryDelegateStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalInfoResponse, error) {
	out := new(QueryDelegateStakeRemovalInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetDelegateStakeRemovalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerNodeInfo(ctx context.Context, in *QueryWorkerNodeInfoRequest, opts ...grpc.CallOption) (*QueryWorkerNodeInfoResponse, error) {
	out := new(QueryWorkerNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetWorkerNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputerNodeInfo(ctx context.Context, in *QueryReputerNodeInfoRequest, opts ...grpc.CallOption) (*QueryReputerNodeInfoResponse, error) {
	out := new(QueryReputerNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetReputerNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerAddressByP2PKey(ctx context.Context, in *QueryWorkerAddressByP2PKeyRequest, opts ...grpc.CallOption) (*QueryWorkerAddressByP2PKeyResponse, error) {
	out := new(QueryWorkerAddressByP2PKeyResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetWorkerAddressByP2PKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputerAddressByP2PKey(ctx context.Context, in *QueryReputerAddressByP2PKeyRequest, opts ...grpc.CallOption) (*QueryReputerAddressByP2PKeyResponse, error) {
	out := new(QueryReputerAddressByP2PKeyResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetReputerAddressByP2PKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsWorkerRegisteredInTopicId(ctx context.Context, in *QueryIsWorkerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsWorkerRegisteredInTopicIdResponse, error) {
	out := new(QueryIsWorkerRegisteredInTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/IsWorkerRegisteredInTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsReputerRegisteredInTopicId(ctx context.Context, in *QueryIsReputerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsReputerRegisteredInTopicIdResponse, error) {
	out := new(QueryIsReputerRegisteredInTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/IsReputerRegisteredInTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNetworkInferencesAtBlock(ctx context.Context, in *QueryNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkInferencesAtBlockResponse, error) {
	out := new(QueryNetworkInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetNetworkInferencesAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestNetworkInference(ctx context.Context, in *QueryLatestNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryLatestNetworkInferencesAtBlockResponse, error) {
	out := new(QueryLatestNetworkInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetLatestNetworkInference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetIsWorkerNonceUnfulfilled(ctx context.Context, in *QueryIsWorkerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsWorkerNonceUnfulfilledResponse, error) {
	out := new(QueryIsWorkerNonceUnfulfilledResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetIsWorkerNonceUnfulfilled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetIsReputerNonceUnfulfilled(ctx context.Context, in *QueryIsReputerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsReputerNonceUnfulfilledResponse, error) {
	out := new(QueryIsReputerNonceUnfulfilledResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetIsReputerNonceUnfulfilled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnfulfilledWorkerNonces(ctx context.Context, in *QueryUnfulfilledWorkerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledWorkerNoncesResponse, error) {
	out := new(QueryUnfulfilledWorkerNoncesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetUnfulfilledWorkerNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnfulfilledReputerNonces(ctx context.Context, in *QueryUnfulfilledReputerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledReputerNoncesResponse, error) {
	out := new(QueryUnfulfilledReputerNoncesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetUnfulfilledReputerNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInfererNetworkRegret(ctx context.Context, in *QueryInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryInfererNetworkRegretResponse, error) {
	out := new(QueryInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetInfererNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsWhitelistAdmin(ctx context.Context, in *QueryIsWhitelistAdminRequest, opts ...grpc.CallOption) (*QueryIsWhitelistAdminResponse, error) {
	out := new(QueryIsWhitelistAdminResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/IsWhitelistAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicLastWorkerCommitInfo(ctx context.Context, in *QueryTopicLastCommitRequest, opts ...grpc.CallOption) (*QueryTopicLastCommitResponse, error) {
	out := new(QueryTopicLastCommitResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopicLastWorkerCommitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicLastReputerCommitInfo(ctx context.Context, in *QueryTopicLastCommitRequest, opts ...grpc.CallOption) (*QueryTopicLastCommitResponse, error) {
	out := new(QueryTopicLastCommitResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopicLastReputerCommitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns the module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	GetNextTopicId(context.Context, *QueryNextTopicIdRequest) (*QueryNextTopicIdResponse, error)
	GetTopic(context.Context, *QueryTopicRequest) (*QueryTopicResponse, error)
	GetActiveTopics(context.Context, *QueryActiveTopicsRequest) (*QueryActiveTopicsResponse, error)
	GetWorkerLatestInferenceByTopicId(context.Context, *QueryWorkerLatestInferenceRequest) (*QueryWorkerLatestInferenceResponse, error)
	GetInferencesAtBlock(context.Context, *QueryInferencesAtBlockRequest) (*QueryInferencesAtBlockResponse, error)
	GetForecastsAtBlock(context.Context, *QueryForecastsAtBlockRequest) (*QueryForecastsAtBlockResponse, error)
	GetNetworkLossBundleAtBlock(context.Context, *QueryNetworkLossBundleAtBlockRequest) (*QueryNetworkLossBundleAtBlockResponse, error)
	GetTotalStake(context.Context, *QueryTotalStakeRequest) (*QueryTotalStakeResponse, error)
	GetReputerStakeInTopic(context.Context, *QueryReputerStakeInTopicRequest) (*QueryReputerStakeInTopicResponse, error)
	GetMultiReputerStakeInTopic(context.Context, *QueryMultiReputerStakeInTopicRequest) (*QueryMultiReputerStakeInTopicResponse, error)
	GetStakeFromReputerInTopicInSelf(context.Context, *QueryStakeFromReputerInTopicInSelfRequest) (*QueryStakeFromReputerInTopicInSelfResponse, error)
	GetDelegateStakeInTopicInReputer(context.Context, *QueryDelegateStakeInTopicInReputerRequest) (*QueryDelegateStakeInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopicInReputer(context.Context, *QueryStakeFromDelegatorInTopicInReputerRequest) (*QueryStakeFromDelegatorInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopic(context.Context, *QueryStakeFromDelegatorInTopicRequest) (*QueryStakeFromDelegatorInTopicResponse, error)
	GetTopicStake(context.Context, *QueryTopicStakeRequest) (*QueryTopicStakeResponse, error)
	GetStakeRemovalsForBlock(context.Context, *QueryStakeRemovalsForBlockRequest) (*QueryStakeRemovalsForBlockResponse, error)
	GetDelegateStakeRemovalsForBlock(context.Context, *QueryDelegateStakeRemovalsForBlockRequest) (*QueryDelegateStakeRemovalsForBlockResponse, error)
	GetStakeRemovalInfo(context.Context, *QueryStakeRemovalInfoRequest) (*QueryStakeRemovalInfoResponse, error)
	GetDelegateStakeRemovalInfo(context.Context, *QueryDelegateStakeRemovalInfoRequest) (*QueryDelegateStakeRemovalInfoResponse, error)
	GetWorkerNodeInfo(context.Context, *QueryWorkerNodeInfoRequest) (*QueryWorkerNodeInfoResponse, error)
	GetReputerNodeInfo(context.Context, *QueryReputerNodeInfoRequest) (*QueryReputerNodeInfoResponse, error)
	GetWorkerAddressByP2PKey(context.Context, *QueryWorkerAddressByP2PKeyRequest) (*QueryWorkerAddressByP2PKeyResponse, error)
	GetReputerAddressByP2PKey(context.Context, *QueryReputerAddressByP2PKeyRequest) (*QueryReputerAddressByP2PKeyResponse, error)
	IsWorkerRegisteredInTopicId(context.Context, *QueryIsWorkerRegisteredInTopicIdRequest) (*QueryIsWorkerRegisteredInTopicIdResponse, error)
	IsReputerRegisteredInTopicId(context.Context, *QueryIsReputerRegisteredInTopicIdRequest) (*QueryIsReputerRegisteredInTopicIdResponse, error)
	GetNetworkInferencesAtBlock(context.Context, *QueryNetworkInferencesAtBlockRequest) (*QueryNetworkInferencesAtBlockResponse, error)
	GetLatestNetworkInference(context.Context, *QueryLatestNetworkInferencesAtBlockRequest) (*QueryLatestNetworkInferencesAtBlockResponse, error)
	GetIsWorkerNonceUnfulfilled(context.Context, *QueryIsWorkerNonceUnfulfilledRequest) (*QueryIsWorkerNonceUnfulfilledResponse, error)
	GetIsReputerNonceUnfulfilled(context.Context, *QueryIsReputerNonceUnfulfilledRequest) (*QueryIsReputerNonceUnfulfilledResponse, error)
	GetUnfulfilledWorkerNonces(context.Context, *QueryUnfulfilledWorkerNoncesRequest) (*QueryUnfulfilledWorkerNoncesResponse, error)
	GetUnfulfilledReputerNonces(context.Context, *QueryUnfulfilledReputerNoncesRequest) (*QueryUnfulfilledReputerNoncesResponse, error)
	GetInfererNetworkRegret(context.Context, *QueryInfererNetworkRegretRequest) (*QueryInfererNetworkRegretResponse, error)
	IsWhitelistAdmin(context.Context, *QueryIsWhitelistAdminRequest) (*QueryIsWhitelistAdminResponse, error)
	GetTopicLastWorkerCommitInfo(context.Context, *QueryTopicLastCommitRequest) (*QueryTopicLastCommitResponse, error)
	GetTopicLastReputerCommitInfo(context.Context, *QueryTopicLastCommitRequest) (*QueryTopicLastCommitResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetNextTopicId(ctx context.Context, req *QueryNextTopicIdRequest) (*QueryNextTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextTopicId not implemented")
}
func (*UnimplementedQueryServer) GetTopic(ctx context.Context, req *QueryTopicRequest) (*QueryTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (*UnimplementedQueryServer) GetActiveTopics(ctx context.Context, req *QueryActiveTopicsRequest) (*QueryActiveTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTopics not implemented")
}
func (*UnimplementedQueryServer) GetWorkerLatestInferenceByTopicId(ctx context.Context, req *QueryWorkerLatestInferenceRequest) (*QueryWorkerLatestInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerLatestInferenceByTopicId not implemented")
}
func (*UnimplementedQueryServer) GetInferencesAtBlock(ctx context.Context, req *QueryInferencesAtBlockRequest) (*QueryInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferencesAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetForecastsAtBlock(ctx context.Context, req *QueryForecastsAtBlockRequest) (*QueryForecastsAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecastsAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetNetworkLossBundleAtBlock(ctx context.Context, req *QueryNetworkLossBundleAtBlockRequest) (*QueryNetworkLossBundleAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkLossBundleAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetTotalStake(ctx context.Context, req *QueryTotalStakeRequest) (*QueryTotalStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalStake not implemented")
}
func (*UnimplementedQueryServer) GetReputerStakeInTopic(ctx context.Context, req *QueryReputerStakeInTopicRequest) (*QueryReputerStakeInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerStakeInTopic not implemented")
}
func (*UnimplementedQueryServer) GetMultiReputerStakeInTopic(ctx context.Context, req *QueryMultiReputerStakeInTopicRequest) (*QueryMultiReputerStakeInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiReputerStakeInTopic not implemented")
}
func (*UnimplementedQueryServer) GetStakeFromReputerInTopicInSelf(ctx context.Context, req *QueryStakeFromReputerInTopicInSelfRequest) (*QueryStakeFromReputerInTopicInSelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromReputerInTopicInSelf not implemented")
}
func (*UnimplementedQueryServer) GetDelegateStakeInTopicInReputer(ctx context.Context, req *QueryDelegateStakeInTopicInReputerRequest) (*QueryDelegateStakeInTopicInReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeInTopicInReputer not implemented")
}
func (*UnimplementedQueryServer) GetStakeFromDelegatorInTopicInReputer(ctx context.Context, req *QueryStakeFromDelegatorInTopicInReputerRequest) (*QueryStakeFromDelegatorInTopicInReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromDelegatorInTopicInReputer not implemented")
}
func (*UnimplementedQueryServer) GetStakeFromDelegatorInTopic(ctx context.Context, req *QueryStakeFromDelegatorInTopicRequest) (*QueryStakeFromDelegatorInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromDelegatorInTopic not implemented")
}
func (*UnimplementedQueryServer) GetTopicStake(ctx context.Context, req *QueryTopicStakeRequest) (*QueryTopicStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicStake not implemented")
}
func (*UnimplementedQueryServer) GetStakeRemovalsForBlock(ctx context.Context, req *QueryStakeRemovalsForBlockRequest) (*QueryStakeRemovalsForBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalsForBlock not implemented")
}
func (*UnimplementedQueryServer) GetDelegateStakeRemovalsForBlock(ctx context.Context, req *QueryDelegateStakeRemovalsForBlockRequest) (*QueryDelegateStakeRemovalsForBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemovalsForBlock not implemented")
}
func (*UnimplementedQueryServer) GetStakeRemovalInfo(ctx context.Context, req *QueryStakeRemovalInfoRequest) (*QueryStakeRemovalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalInfo not implemented")
}
func (*UnimplementedQueryServer) GetDelegateStakeRemovalInfo(ctx context.Context, req *QueryDelegateStakeRemovalInfoRequest) (*QueryDelegateStakeRemovalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemovalInfo not implemented")
}
func (*UnimplementedQueryServer) GetWorkerNodeInfo(ctx context.Context, req *QueryWorkerNodeInfoRequest) (*QueryWorkerNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerNodeInfo not implemented")
}
func (*UnimplementedQueryServer) GetReputerNodeInfo(ctx context.Context, req *QueryReputerNodeInfoRequest) (*QueryReputerNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerNodeInfo not implemented")
}
func (*UnimplementedQueryServer) GetWorkerAddressByP2PKey(ctx context.Context, req *QueryWorkerAddressByP2PKeyRequest) (*QueryWorkerAddressByP2PKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerAddressByP2PKey not implemented")
}
func (*UnimplementedQueryServer) GetReputerAddressByP2PKey(ctx context.Context, req *QueryReputerAddressByP2PKeyRequest) (*QueryReputerAddressByP2PKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerAddressByP2PKey not implemented")
}
func (*UnimplementedQueryServer) IsWorkerRegisteredInTopicId(ctx context.Context, req *QueryIsWorkerRegisteredInTopicIdRequest) (*QueryIsWorkerRegisteredInTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkerRegisteredInTopicId not implemented")
}
func (*UnimplementedQueryServer) IsReputerRegisteredInTopicId(ctx context.Context, req *QueryIsReputerRegisteredInTopicIdRequest) (*QueryIsReputerRegisteredInTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReputerRegisteredInTopicId not implemented")
}
func (*UnimplementedQueryServer) GetNetworkInferencesAtBlock(ctx context.Context, req *QueryNetworkInferencesAtBlockRequest) (*QueryNetworkInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInferencesAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetLatestNetworkInference(ctx context.Context, req *QueryLatestNetworkInferencesAtBlockRequest) (*QueryLatestNetworkInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestNetworkInference not implemented")
}
func (*UnimplementedQueryServer) GetIsWorkerNonceUnfulfilled(ctx context.Context, req *QueryIsWorkerNonceUnfulfilledRequest) (*QueryIsWorkerNonceUnfulfilledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIsWorkerNonceUnfulfilled not implemented")
}
func (*UnimplementedQueryServer) GetIsReputerNonceUnfulfilled(ctx context.Context, req *QueryIsReputerNonceUnfulfilledRequest) (*QueryIsReputerNonceUnfulfilledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIsReputerNonceUnfulfilled not implemented")
}
func (*UnimplementedQueryServer) GetUnfulfilledWorkerNonces(ctx context.Context, req *QueryUnfulfilledWorkerNoncesRequest) (*QueryUnfulfilledWorkerNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfulfilledWorkerNonces not implemented")
}
func (*UnimplementedQueryServer) GetUnfulfilledReputerNonces(ctx context.Context, req *QueryUnfulfilledReputerNoncesRequest) (*QueryUnfulfilledReputerNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfulfilledReputerNonces not implemented")
}
func (*UnimplementedQueryServer) GetInfererNetworkRegret(ctx context.Context, req *QueryInfererNetworkRegretRequest) (*QueryInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfererNetworkRegret not implemented")
}
func (*UnimplementedQueryServer) IsWhitelistAdmin(ctx context.Context, req *QueryIsWhitelistAdminRequest) (*QueryIsWhitelistAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistAdmin not implemented")
}
func (*UnimplementedQueryServer) GetTopicLastWorkerCommitInfo(ctx context.Context, req *QueryTopicLastCommitRequest) (*QueryTopicLastCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastWorkerCommitInfo not implemented")
}
func (*UnimplementedQueryServer) GetTopicLastReputerCommitInfo(ctx context.Context, req *QueryTopicLastCommitRequest) (*QueryTopicLastCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastReputerCommitInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetNextTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextTopicId(ctx, req.(*QueryNextTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopic(ctx, req.(*QueryTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetActiveTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetActiveTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetActiveTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetActiveTopics(ctx, req.(*QueryActiveTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerLatestInferenceByTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerLatestInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerLatestInferenceByTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetWorkerLatestInferenceByTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerLatestInferenceByTopicId(ctx, req.(*QueryWorkerLatestInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInferencesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInferencesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetInferencesAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInferencesAtBlock(ctx, req.(*QueryInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetForecastsAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryForecastsAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetForecastsAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetForecastsAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetForecastsAtBlock(ctx, req.(*QueryForecastsAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNetworkLossBundleAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetworkLossBundleAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNetworkLossBundleAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetNetworkLossBundleAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNetworkLossBundleAtBlock(ctx, req.(*QueryNetworkLossBundleAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTotalStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalStake(ctx, req.(*QueryTotalStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputerStakeInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputerStakeInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputerStakeInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetReputerStakeInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputerStakeInTopic(ctx, req.(*QueryReputerStakeInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMultiReputerStakeInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiReputerStakeInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMultiReputerStakeInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetMultiReputerStakeInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMultiReputerStakeInTopic(ctx, req.(*QueryMultiReputerStakeInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeFromReputerInTopicInSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeFromReputerInTopicInSelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeFromReputerInTopicInSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeFromReputerInTopicInSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeFromReputerInTopicInSelf(ctx, req.(*QueryStakeFromReputerInTopicInSelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeInTopicInReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeInTopicInReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeInTopicInReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetDelegateStakeInTopicInReputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeInTopicInReputer(ctx, req.(*QueryDelegateStakeInTopicInReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeFromDelegatorInTopicInReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeFromDelegatorInTopicInReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeFromDelegatorInTopicInReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeFromDelegatorInTopicInReputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeFromDelegatorInTopicInReputer(ctx, req.(*QueryStakeFromDelegatorInTopicInReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeFromDelegatorInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeFromDelegatorInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeFromDelegatorInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeFromDelegatorInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeFromDelegatorInTopic(ctx, req.(*QueryStakeFromDelegatorInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopicStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicStake(ctx, req.(*QueryTopicStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeRemovalsForBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRemovalsForBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeRemovalsForBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeRemovalsForBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeRemovalsForBlock(ctx, req.(*QueryStakeRemovalsForBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeRemovalsForBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeRemovalsForBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeRemovalsForBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetDelegateStakeRemovalsForBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeRemovalsForBlock(ctx, req.(*QueryDelegateStakeRemovalsForBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeRemovalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRemovalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeRemovalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeRemovalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeRemovalInfo(ctx, req.(*QueryStakeRemovalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeRemovalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeRemovalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeRemovalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetDelegateStakeRemovalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeRemovalInfo(ctx, req.(*QueryDelegateStakeRemovalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetWorkerNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerNodeInfo(ctx, req.(*QueryWorkerNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputerNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputerNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputerNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetReputerNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputerNodeInfo(ctx, req.(*QueryReputerNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerAddressByP2PKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerAddressByP2PKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerAddressByP2PKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetWorkerAddressByP2PKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerAddressByP2PKey(ctx, req.(*QueryWorkerAddressByP2PKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputerAddressByP2PKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputerAddressByP2PKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputerAddressByP2PKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetReputerAddressByP2PKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputerAddressByP2PKey(ctx, req.(*QueryReputerAddressByP2PKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsWorkerRegisteredInTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsWorkerRegisteredInTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsWorkerRegisteredInTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/IsWorkerRegisteredInTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsWorkerRegisteredInTopicId(ctx, req.(*QueryIsWorkerRegisteredInTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsReputerRegisteredInTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsReputerRegisteredInTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsReputerRegisteredInTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/IsReputerRegisteredInTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsReputerRegisteredInTopicId(ctx, req.(*QueryIsReputerRegisteredInTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNetworkInferencesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetworkInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNetworkInferencesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetNetworkInferencesAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNetworkInferencesAtBlock(ctx, req.(*QueryNetworkInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestNetworkInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestNetworkInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestNetworkInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetLatestNetworkInference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestNetworkInference(ctx, req.(*QueryLatestNetworkInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetIsWorkerNonceUnfulfilled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsWorkerNonceUnfulfilledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetIsWorkerNonceUnfulfilled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetIsWorkerNonceUnfulfilled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetIsWorkerNonceUnfulfilled(ctx, req.(*QueryIsWorkerNonceUnfulfilledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetIsReputerNonceUnfulfilled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsReputerNonceUnfulfilledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetIsReputerNonceUnfulfilled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetIsReputerNonceUnfulfilled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetIsReputerNonceUnfulfilled(ctx, req.(*QueryIsReputerNonceUnfulfilledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnfulfilledWorkerNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnfulfilledWorkerNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnfulfilledWorkerNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetUnfulfilledWorkerNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnfulfilledWorkerNonces(ctx, req.(*QueryUnfulfilledWorkerNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnfulfilledReputerNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnfulfilledReputerNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnfulfilledReputerNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetUnfulfilledReputerNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnfulfilledReputerNonces(ctx, req.(*QueryUnfulfilledReputerNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetInfererNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInfererNetworkRegret(ctx, req.(*QueryInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsWhitelistAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsWhitelistAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsWhitelistAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/IsWhitelistAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsWhitelistAdmin(ctx, req.(*QueryIsWhitelistAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicLastWorkerCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicLastCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicLastWorkerCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopicLastWorkerCommitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicLastWorkerCommitInfo(ctx, req.(*QueryTopicLastCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicLastReputerCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicLastCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicLastReputerCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopicLastReputerCommitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicLastReputerCommitInfo(ctx, req.(*QueryTopicLastCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emissions.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetNextTopicId",
			Handler:    _Query_GetNextTopicId_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _Query_GetTopic_Handler,
		},
		{
			MethodName: "GetActiveTopics",
			Handler:    _Query_GetActiveTopics_Handler,
		},
		{
			MethodName: "GetWorkerLatestInferenceByTopicId",
			Handler:    _Query_GetWorkerLatestInferenceByTopicId_Handler,
		},
		{
			MethodName: "GetInferencesAtBlock",
			Handler:    _Query_GetInferencesAtBlock_Handler,
		},
		{
			MethodName: "GetForecastsAtBlock",
			Handler:    _Query_GetForecastsAtBlock_Handler,
		},
		{
			MethodName: "GetNetworkLossBundleAtBlock",
			Handler:    _Query_GetNetworkLossBundleAtBlock_Handler,
		},
		{
			MethodName: "GetTotalStake",
			Handler:    _Query_GetTotalStake_Handler,
		},
		{
			MethodName: "GetReputerStakeInTopic",
			Handler:    _Query_GetReputerStakeInTopic_Handler,
		},
		{
			MethodName: "GetMultiReputerStakeInTopic",
			Handler:    _Query_GetMultiReputerStakeInTopic_Handler,
		},
		{
			MethodName: "GetStakeFromReputerInTopicInSelf",
			Handler:    _Query_GetStakeFromReputerInTopicInSelf_Handler,
		},
		{
			MethodName: "GetDelegateStakeInTopicInReputer",
			Handler:    _Query_GetDelegateStakeInTopicInReputer_Handler,
		},
		{
			MethodName: "GetStakeFromDelegatorInTopicInReputer",
			Handler:    _Query_GetStakeFromDelegatorInTopicInReputer_Handler,
		},
		{
			MethodName: "GetStakeFromDelegatorInTopic",
			Handler:    _Query_GetStakeFromDelegatorInTopic_Handler,
		},
		{
			MethodName: "GetTopicStake",
			Handler:    _Query_GetTopicStake_Handler,
		},
		{
			MethodName: "GetStakeRemovalsForBlock",
			Handler:    _Query_GetStakeRemovalsForBlock_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemovalsForBlock",
			Handler:    _Query_GetDelegateStakeRemovalsForBlock_Handler,
		},
		{
			MethodName: "GetStakeRemovalInfo",
			Handler:    _Query_GetStakeRemovalInfo_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemovalInfo",
			Handler:    _Query_GetDelegateStakeRemovalInfo_Handler,
		},
		{
			MethodName: "GetWorkerNodeInfo",
			Handler:    _Query_GetWorkerNodeInfo_Handler,
		},
		{
			MethodName: "GetReputerNodeInfo",
			Handler:    _Query_GetReputerNodeInfo_Handler,
		},
		{
			MethodName: "GetWorkerAddressByP2PKey",
			Handler:    _Query_GetWorkerAddressByP2PKey_Handler,
		},
		{
			MethodName: "GetReputerAddressByP2PKey",
			Handler:    _Query_GetReputerAddressByP2PKey_Handler,
		},
		{
			MethodName: "IsWorkerRegisteredInTopicId",
			Handler:    _Query_IsWorkerRegisteredInTopicId_Handler,
		},
		{
			MethodName: "IsReputerRegisteredInTopicId",
			Handler:    _Query_IsReputerRegisteredInTopicId_Handler,
		},
		{
			MethodName: "GetNetworkInferencesAtBlock",
			Handler:    _Query_GetNetworkInferencesAtBlock_Handler,
		},
		{
			MethodName: "GetLatestNetworkInference",
			Handler:    _Query_GetLatestNetworkInference_Handler,
		},
		{
			MethodName: "GetIsWorkerNonceUnfulfilled",
			Handler:    _Query_GetIsWorkerNonceUnfulfilled_Handler,
		},
		{
			MethodName: "GetIsReputerNonceUnfulfilled",
			Handler:    _Query_GetIsReputerNonceUnfulfilled_Handler,
		},
		{
			MethodName: "GetUnfulfilledWorkerNonces",
			Handler:    _Query_GetUnfulfilledWorkerNonces_Handler,
		},
		{
			MethodName: "GetUnfulfilledReputerNonces",
			Handler:    _Query_GetUnfulfilledReputerNonces_Handler,
		},
		{
			MethodName: "GetInfererNetworkRegret",
			Handler:    _Query_GetInfererNetworkRegret_Handler,
		},
		{
			MethodName: "IsWhitelistAdmin",
			Handler:    _Query_IsWhitelistAdmin_Handler,
		},
		{
			MethodName: "GetTopicLastWorkerCommitInfo",
			Handler:    _Query_GetTopicLastWorkerCommitInfo_Handler,
		},
		{
			MethodName: "GetTopicLastReputerCommitInfo",
			Handler:    _Query_GetTopicLastReputerCommitInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emissions/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReputerStakeInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerStakeInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerStakeInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputerStakeInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerStakeInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerStakeInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMultiReputerStakeInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiReputerStakeInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiReputerStakeInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiReputerStakeInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiReputerStakeInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiReputerStakeInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReputerAddress) > 0 {
		i -= len(m.ReputerAddress)
		copy(dAtA[i:], m.ReputerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReputerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromReputerInTopicInSelfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromReputerInTopicInSelfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromReputerInTopicInSelfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeInTopicInReputerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeInTopicInReputerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeInTopicInReputerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReputerAddress) > 0 {
		i -= len(m.ReputerAddress)
		copy(dAtA[i:], m.ReputerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReputerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeInTopicInReputerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeInTopicInReputerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeInTopicInReputerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReputerAddress) > 0 {
		i -= len(m.ReputerAddress)
		copy(dAtA[i:], m.ReputerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReputerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromDelegatorInTopicInReputerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromDelegatorInTopicInReputerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromDelegatorInTopicInReputerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromDelegatorInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromDelegatorInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromDelegatorInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromDelegatorInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromDelegatorInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromDelegatorInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTopicStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNetworkLossBundleAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkLossBundleAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkLossBundleAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNetworkLossBundleAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkLossBundleAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkLossBundleAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LossBundle != nil {
		{
			size, err := m.LossBundle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextTopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextTopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EffectiveRevenue) > 0 {
		i -= len(m.EffectiveRevenue)
		copy(dAtA[i:], m.EffectiveRevenue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EffectiveRevenue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x12
	}
	if m.Topic != nil {
		{
			size, err := m.Topic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveTopicsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveTopicsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveTopicsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveTopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveTopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveTopicsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inferences != nil {
		{
			size, err := m.Inferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryForecastsAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryForecastsAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryForecastsAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryForecastsAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryForecastsAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryForecastsAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Forecasts != nil {
		{
			size, err := m.Forecasts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerLatestInferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerLatestInferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerLatestInferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerAddress) > 0 {
		i -= len(m.WorkerAddress)
		copy(dAtA[i:], m.WorkerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WorkerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerLatestInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerLatestInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerLatestInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestInference != nil {
		{
			size, err := m.LatestInference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerNodeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerNodeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerNodeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Libp2PKey) > 0 {
		i -= len(m.Libp2PKey)
		copy(dAtA[i:], m.Libp2PKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Libp2PKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerNodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerNodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerNodeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputerNodeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerNodeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerNodeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Libp2PKey) > 0 {
		i -= len(m.Libp2PKey)
		copy(dAtA[i:], m.Libp2PKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Libp2PKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputerNodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerNodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerNodeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerAddressByP2PKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerAddressByP2PKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerAddressByP2PKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Libp2PKey) > 0 {
		i -= len(m.Libp2PKey)
		copy(dAtA[i:], m.Libp2PKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Libp2PKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerAddressByP2PKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerAddressByP2PKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerAddressByP2PKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputerAddressByP2PKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerAddressByP2PKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerAddressByP2PKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Libp2PKey) > 0 {
		i -= len(m.Libp2PKey)
		copy(dAtA[i:], m.Libp2PKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Libp2PKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputerAddressByP2PKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerAddressByP2PKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerAddressByP2PKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNetworkInferencesAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkInferencesAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkInferencesAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeightLastReward != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeightLastReward))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeightLastInference != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeightLastInference))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestNetworkInferencesAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestNetworkInferencesAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestNetworkInferencesAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWorkerNonceUnfulfilledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWorkerNonceUnfulfilledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWorkerNonceUnfulfilledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWorkerNonceUnfulfilled {
		i--
		if m.IsWorkerNonceUnfulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnfulfilledReputerNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnfulfilledReputerNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnfulfilledReputerNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnfulfilledReputerNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnfulfilledReputerNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnfulfilledReputerNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonces != nil {
		{
			size, err := m.Nonces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnfulfilledWorkerNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnfulfilledWorkerNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnfulfilledWorkerNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnfulfilledWorkerNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnfulfilledWorkerNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnfulfilledWorkerNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonces != nil {
		{
			size, err := m.Nonces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInfererNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInfererNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInfererNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActorId) > 0 {
		i -= len(m.ActorId)
		copy(dAtA[i:], m.ActorId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ActorId)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInfererNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInfererNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInfererNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotFound {
		i--
		if m.NotFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsReputerNonceUnfulfilledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsReputerNonceUnfulfilledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsReputerNonceUnfulfilledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsReputerNonceUnfulfilledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsReputerNonceUnfulfilledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsReputerNonceUnfulfilledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsReputerNonceUnfulfilled {
		i--
		if m.IsReputerNonceUnfulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNetworkInferencesAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkInferencesAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkInferencesAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkInferences != nil {
		{
			size, err := m.NetworkInferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestNetworkInferencesAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestNetworkInferencesAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestNetworkInferencesAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForecastImpliedInferences) > 0 {
		for iNdEx := len(m.ForecastImpliedInferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecastImpliedInferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ForecasterWeights) > 0 {
		for iNdEx := len(m.ForecasterWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecasterWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InfererWeights) > 0 {
		for iNdEx := len(m.InfererWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InfererWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NetworkInferences != nil {
		{
			size, err := m.NetworkInferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWorkerRegisteredInTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWorkerRegisteredInTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWorkerRegisteredInTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsReputerRegisteredInTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsReputerRegisteredInTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsReputerRegisteredInTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWhitelistAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWhitelistAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWhitelistAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWhitelistAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWhitelistAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWhitelistAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAdmin {
		i--
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRemovalsForBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRemovalsForBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRemovalsForBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRemovalsForBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRemovalsForBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRemovalsForBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for iNdEx := len(m.Removals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Removals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeRemovalsForBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeRemovalsForBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeRemovalsForBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeRemovalsForBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeRemovalsForBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeRemovalsForBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for iNdEx := len(m.Removals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Removals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRemovalInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRemovalInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRemovalInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRemovalInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRemovalInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRemovalInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removal != nil {
		{
			size, err := m.Removal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeRemovalInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeRemovalInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeRemovalInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeRemovalInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeRemovalInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeRemovalInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removal != nil {
		{
			size, err := m.Removal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicLastCommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicLastCommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicLastCommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicLastCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicLastCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicLastCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommit != nil {
		{
			size, err := m.LastCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReputerStakeInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryReputerStakeInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMultiReputerStakeInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryMultiReputerStakeInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReputerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryStakeFromReputerInTopicInSelfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegateStakeInTopicInReputerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReputerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryDelegateStakeInTopicInReputerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ReputerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryStakeFromDelegatorInTopicInReputerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStakeFromDelegatorInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryStakeFromDelegatorInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTopicStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNetworkLossBundleAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryNetworkLossBundleAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LossBundle != nil {
		l = m.LossBundle.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextTopicId != 0 {
		n += 1 + sovQuery(uint64(m.NextTopicId))
	}
	return n
}

func (m *QueryTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EffectiveRevenue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveTopicsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveTopicsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInferencesAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryInferencesAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inferences != nil {
		l = m.Inferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryForecastsAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryForecastsAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Forecasts != nil {
		l = m.Forecasts.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerLatestInferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.WorkerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerLatestInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestInference != nil {
		l = m.LatestInference.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerNodeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Libp2PKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerNodeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReputerNodeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Libp2PKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReputerNodeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerAddressByP2PKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Libp2PKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerAddressByP2PKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReputerAddressByP2PKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Libp2PKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReputerAddressByP2PKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNetworkInferencesAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeightLastInference != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeightLastInference))
	}
	if m.BlockHeightLastReward != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeightLastReward))
	}
	return n
}

func (m *QueryLatestNetworkInferencesAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryIsWorkerNonceUnfulfilledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsWorkerNonceUnfulfilled {
		n += 2
	}
	return n
}

func (m *QueryUnfulfilledReputerNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryUnfulfilledReputerNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonces != nil {
		l = m.Nonces.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnfulfilledWorkerNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryUnfulfilledWorkerNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonces != nil {
		l = m.Nonces.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInfererNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.ActorId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInfererNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.NotFound {
		n += 2
	}
	return n
}

func (m *QueryIsReputerNonceUnfulfilledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryIsReputerNonceUnfulfilledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsReputerNonceUnfulfilled {
		n += 2
	}
	return n
}

func (m *QueryNetworkInferencesAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInferences != nil {
		l = m.NetworkInferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestNetworkInferencesAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInferences != nil {
		l = m.NetworkInferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.InfererWeights) > 0 {
		for _, e := range m.InfererWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ForecasterWeights) > 0 {
		for _, e := range m.ForecasterWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ForecastImpliedInferences) > 0 {
		for _, e := range m.ForecastImpliedInferences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsWorkerRegisteredInTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRegistered {
		n += 2
	}
	return n
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsReputerRegisteredInTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRegistered {
		n += 2
	}
	return n
}

func (m *QueryIsWhitelistAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsWhitelistAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAdmin {
		n += 2
	}
	return n
}

func (m *QueryStakeRemovalsForBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryStakeRemovalsForBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for _, e := range m.Removals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDelegateStakeRemovalsForBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryDelegateStakeRemovalsForBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for _, e := range m.Removals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStakeRemovalInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeRemovalInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Removal != nil {
		l = m.Removal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateStakeRemovalInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateStakeRemovalInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Removal != nil {
		l = m.Removal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTopicLastCommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicLastCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastCommit != nil {
		l = m.LastCommit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerStakeInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerStakeInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerStakeInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerStakeInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerStakeInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerStakeInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiReputerStakeInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiReputerStakeInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiReputerStakeInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiReputerStakeInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiReputerStakeInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiReputerStakeInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, &StakeInfo{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromReputerInTopicInSelfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromReputerInTopicInSelfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromReputerInTopicInSelfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromReputerInTopicInSelfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeInTopicInReputerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeInTopicInReputerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeInTopicInReputerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeInTopicInReputerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeInTopicInReputerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeInTopicInReputerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicInReputerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicInReputerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicInReputerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicInReputerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromDelegatorInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromDelegatorInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetworkLossBundleAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkLossBundleAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkLossBundleAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetworkLossBundleAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkLossBundleAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkLossBundleAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBundle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LossBundle == nil {
				m.LossBundle = &ValueBundle{}
			}
			if err := m.LossBundle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTopicId", wireType)
			}
			m.NextTopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &Topic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveRevenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveRevenue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveTopicsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveTopicsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveTopicsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &SimpleCursorPaginationRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveTopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveTopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveTopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &SimpleCursorPaginationResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inferences == nil {
				m.Inferences = &Inferences{}
			}
			if err := m.Inferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryForecastsAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryForecastsAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryForecastsAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryForecastsAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryForecastsAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryForecastsAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forecasts == nil {
				m.Forecasts = &Forecasts{}
			}
			if err := m.Forecasts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerLatestInferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerLatestInferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerLatestInferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerLatestInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerLatestInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerLatestInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestInference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestInference == nil {
				m.LatestInference = &Inference{}
			}
			if err := m.LatestInference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerNodeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerNodeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerNodeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Libp2PKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Libp2PKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerNodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerNodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerNodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeInfo == nil {
				m.NodeInfo = &OffchainNode{}
			}
			if err := m.NodeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerNodeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerNodeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerNodeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Libp2PKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Libp2PKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerNodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerNodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerNodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeInfo == nil {
				m.NodeInfo = &OffchainNode{}
			}
			if err := m.NodeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerAddressByP2PKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerAddressByP2PKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerAddressByP2PKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Libp2PKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Libp2PKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerAddressByP2PKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerAddressByP2PKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerAddressByP2PKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerAddressByP2PKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerAddressByP2PKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerAddressByP2PKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Libp2PKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Libp2PKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerAddressByP2PKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerAddressByP2PKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerAddressByP2PKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetworkInferencesAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkInferencesAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkInferencesAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightLastInference", wireType)
			}
			m.BlockHeightLastInference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightLastInference |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightLastReward", wireType)
			}
			m.BlockHeightLastReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightLastReward |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestNetworkInferencesAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestNetworkInferencesAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestNetworkInferencesAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWorkerNonceUnfulfilledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWorkerNonceUnfulfilledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWorkerNonceUnfulfilledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWorkerNonceUnfulfilledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWorkerNonceUnfulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWorkerNonceUnfulfilled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnfulfilledReputerNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnfulfilledReputerNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnfulfilledReputerNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnfulfilledReputerNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnfulfilledReputerNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnfulfilledReputerNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nonces == nil {
				m.Nonces = &ReputerRequestNonces{}
			}
			if err := m.Nonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnfulfilledWorkerNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnfulfilledWorkerNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnfulfilledWorkerNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnfulfilledWorkerNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnfulfilledWorkerNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnfulfilledWorkerNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nonces == nil {
				m.Nonces = &Nonces{}
			}
			if err := m.Nonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInfererNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInfererNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInfererNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInfererNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInfererNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInfererNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsReputerNonceUnfulfilledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsReputerNonceUnfulfilledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsReputerNonceUnfulfilledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsReputerNonceUnfulfilledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsReputerNonceUnfulfilledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsReputerNonceUnfulfilledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReputerNonceUnfulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReputerNonceUnfulfilled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetworkInferencesAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkInferencesAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkInferencesAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkInferences == nil {
				m.NetworkInferences = &ValueBundle{}
			}
			if err := m.NetworkInferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestNetworkInferencesAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestNetworkInferencesAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestNetworkInferencesAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkInferences == nil {
				m.NetworkInferences = &ValueBundle{}
			}
			if err := m.NetworkInferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfererWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfererWeights = append(m.InfererWeights, &RegretInformedWeight{})
			if err := m.InfererWeights[len(m.InfererWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecasterWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecasterWeights = append(m.ForecasterWeights, &RegretInformedWeight{})
			if err := m.ForecasterWeights[len(m.ForecasterWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecastImpliedInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecastImpliedInferences = append(m.ForecastImpliedInferences, &WorkerAttributedValue{})
			if err := m.ForecastImpliedInferences[len(m.ForecastImpliedInferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWorkerRegisteredInTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWorkerRegisteredInTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWorkerRegisteredInTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWorkerRegisteredInTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsReputerRegisteredInTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsReputerRegisteredInTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsReputerRegisteredInTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsReputerRegisteredInTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWhitelistAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWhitelistAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWhitelistAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWhitelistAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWhitelistAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWhitelistAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRemovalsForBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRemovalsForBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRemovalsForBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRemovalsForBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRemovalsForBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRemovalsForBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Removals = append(m.Removals, &StakeRemovalInfo{})
			if err := m.Removals[len(m.Removals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeRemovalsForBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalsForBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalsForBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeRemovalsForBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalsForBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalsForBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Removals = append(m.Removals, &DelegateStakeRemovalInfo{})
			if err := m.Removals[len(m.Removals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRemovalInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRemovalInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRemovalInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRemovalInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRemovalInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRemovalInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Removal == nil {
				m.Removal = &StakeRemovalInfo{}
			}
			if err := m.Removal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeRemovalInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeRemovalInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Removal == nil {
				m.Removal = &DelegateStakeRemovalInfo{}
			}
			if err := m.Removal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicLastCommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicLastCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicLastCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicLastCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicLastCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicLastCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCommit == nil {
				m.LastCommit = &TimestampedActorNonce{}
			}
			if err := m.LastCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
